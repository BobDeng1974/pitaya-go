{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pitaya Go An Open-Source IoT Development Platform with Multiprotocol Wireless Connectivity Description Pitaya Go is a compact and versatile development platform for IoT solutions, combining the Nordic's high-end multiprotocol SoC nRF52840 and the Microchip's extreme low power Wi-Fi\u00ae network controller ATWINC1500B . It offers a complete solution for wireless connectivity with IEEE 802.11 b/g/n, Bluetooth 5, Thread and Zigbee, that is specifically designed for the IoT. Pitaya Go features a Battery Charger with power path management, 64Mbit ultra low power QSPI Flash memory, additional NFC-A Tag PCB Antenna, user programmable RGB LED and Buttons, reversible USB-C Connector and easily expandable Header Sockets. All these features above make this board an ideal choice for the next IoT project. Features Nordic Semiconductor nRF52840 SoC 64 MHz Arm\u00ae Cortex-M4 with FPU 1 MB Flash + 256 KB RAM Bluetooth 5, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary Arm TrustZone\u00ae Cryptocell 310 Security Subsystem Integrated USB 2.0 Full-speed Controller QSPI/SPI/TWI/I\u00b2S/PDM/QDEC/ADC support Integrated NFC-A Tag Microchip ATWINC1500B Wi-Fi Network Controller Shipped with the latest firmware 19.6.1 IEEE 802.11 b/g/n 20 MHz (1x1) Solution Extreme low power with Shutdown Control On-Chip Network Stack to Offload MCU Supports Soft-AP Security protocols supported: WPA/WPA2 Personal, TLS/SSL Enterprise Security with WPA/WPA2 (802.11x) Network services: DHCP, DNS, TCP/IP (IPv4), UDP, HTTP, HTTPS, MQTT 64Mbit ultra-low power QSPI Flash Memory Integrated Li-Po Battery Charger with Power Path Management Additional NFC-A Tag PCB Antenna User programmable RGB LED and Buttons Dual Wi-Fi/Bluetooth 2.4G Chip Antennas Reversible USB-C Connector Li-Po Battery Connector Easily expandable dual 14-Pin Header Sockets Measures 2.4\" x 1.0\" x 0.3\" (60.96mm x 25.4mm x 7.6mm) Hardware Diagram Included in the Box Part Qty Pitaya Go Board 1 NFC PCB Antenna 1 USB-C Cable 1 Tutorials We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with Pitaya Go How to Program Pitaya Go nRF5 SDK Tutorials Wi-Fi Tutorials OpenThread Tutorials Design Files Pitaya Go Pinout Diagram V1.0 Pitaya Go Schematic V1.0 Pitaya Go Board File V1.0 Pitaya Go 3D STEP V1.0 Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Introduction"},{"location":"#pitaya-go-an-open-source-iot-development-platform-with-multiprotocol-wireless-connectivity","text":"","title":"Pitaya Go An Open-Source IoT Development Platform with Multiprotocol Wireless Connectivity"},{"location":"#description","text":"Pitaya Go is a compact and versatile development platform for IoT solutions, combining the Nordic's high-end multiprotocol SoC nRF52840 and the Microchip's extreme low power Wi-Fi\u00ae network controller ATWINC1500B . It offers a complete solution for wireless connectivity with IEEE 802.11 b/g/n, Bluetooth 5, Thread and Zigbee, that is specifically designed for the IoT. Pitaya Go features a Battery Charger with power path management, 64Mbit ultra low power QSPI Flash memory, additional NFC-A Tag PCB Antenna, user programmable RGB LED and Buttons, reversible USB-C Connector and easily expandable Header Sockets. All these features above make this board an ideal choice for the next IoT project.","title":"Description"},{"location":"#features","text":"Nordic Semiconductor nRF52840 SoC 64 MHz Arm\u00ae Cortex-M4 with FPU 1 MB Flash + 256 KB RAM Bluetooth 5, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary Arm TrustZone\u00ae Cryptocell 310 Security Subsystem Integrated USB 2.0 Full-speed Controller QSPI/SPI/TWI/I\u00b2S/PDM/QDEC/ADC support Integrated NFC-A Tag Microchip ATWINC1500B Wi-Fi Network Controller Shipped with the latest firmware 19.6.1 IEEE 802.11 b/g/n 20 MHz (1x1) Solution Extreme low power with Shutdown Control On-Chip Network Stack to Offload MCU Supports Soft-AP Security protocols supported: WPA/WPA2 Personal, TLS/SSL Enterprise Security with WPA/WPA2 (802.11x) Network services: DHCP, DNS, TCP/IP (IPv4), UDP, HTTP, HTTPS, MQTT 64Mbit ultra-low power QSPI Flash Memory Integrated Li-Po Battery Charger with Power Path Management Additional NFC-A Tag PCB Antenna User programmable RGB LED and Buttons Dual Wi-Fi/Bluetooth 2.4G Chip Antennas Reversible USB-C Connector Li-Po Battery Connector Easily expandable dual 14-Pin Header Sockets Measures 2.4\" x 1.0\" x 0.3\" (60.96mm x 25.4mm x 7.6mm)","title":"Features"},{"location":"#hardware-diagram","text":"","title":"Hardware Diagram"},{"location":"#included-in-the-box","text":"Part Qty Pitaya Go Board 1 NFC PCB Antenna 1 USB-C Cable 1","title":"Included in the Box"},{"location":"#tutorials","text":"We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with Pitaya Go How to Program Pitaya Go nRF5 SDK Tutorials Wi-Fi Tutorials OpenThread Tutorials","title":"Tutorials"},{"location":"#design-files","text":"Pitaya Go Pinout Diagram V1.0 Pitaya Go Schematic V1.0 Pitaya Go Board File V1.0 Pitaya Go 3D STEP V1.0","title":"Design Files"},{"location":"#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"CONTRIBUTING/","text":"Contributing Interested in contributing to Pitaya Go ? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? For quick questions there's no need to open an issue as you can reach us on makerdiary/community . Found a bug? If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Requesting a tutorial If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutoial","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Interested in contributing to Pitaya Go ? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on makerdiary/community .","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#requesting-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a tutoial","title":"Requesting a tutorial"},{"location":"LICENSE/","text":"MIT License Copyright 2019 makerdiary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"getting-started/","text":"Getting Started Out of the Box Introduction This section describes how to run the Out of Box Demo without going through the complete toolchain installation. The pre-installed demo running on the Pitaya Go board is controlled with Command Line Interface (CLI) over USB CDC ACM or Bluetooth Low Energy. You can set the LED color, get the chip temperature or control the NFC Tag, using the built-in commands. The application also allows you to connect Pitaya Go to a Wi-Fi network and ping a host in the public network. Included in the Box Your Pitaya Go box includes: 1x Pitaya Go board 1x NFC-A PCB Antenna with MHF I connector 1x USB-C Cable Assemble the Hardware Attach the NFC-A PCB Antenna to the U.FL connector. The connector is marked NFC . Plug in the USB-C cable between your computer and the USB-C Connector. Observe that the PG (Power Good) indicator is lit, and the RGB LED is blinking green. Set Up with Terminal Terminal applications (for example PuTTY or screen ) run on your host PC. They provide a window where you can interact with the device. Start a terminal application. The default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1). For example: screen /dev/cu.usbmodemD2E39D222D781 115200 Note If you are using Windows 7 or earlier, you must load an additional USB CDC driver. The driver can be found in pitaya-go/external/usb_driver . Press Enter on the keyboard to bring up the usb_cli:~$ prompt. Use the Tab key to print the available commands. Set Up with Web Device CLI Web Device CLI is a web-based command line interface using Web Bluetooth API . It implements the Nordic UART Service (NUS) with Bluetooth Low Energy. Open the Web Device CLI page in a Chrome 56+ browser . Web Device CLI Click Connect to scan devices. Pair the Pitaya-Go discovered in the list. Observe that the RGB LED stays GREEN and the ble_cli:~$ prompt is displayed. Use the Tab key to print the available commands. Set the LED Color Use command led to print the command help information. Use command led {R} {G} {B} to set the LED color. The parameters stand for the following: {R} : The RED value, 0 ~ 255. {G} : The GREEN value, 0 ~ 255. {B} : The BLUE value, 0 ~ 255. Set various RGB values and observe the color of LED. Get the Temperature nRF52840 chip features a temperature sensor. The temp command is available for getting the chip temperature. Control the NFC Tag Use command nfc to print the command help information. Use command nfc start to enable the NFC. Touch the NFC PCB Antenna with the smartphone and observe that BLUE LED is lit. Observe that the smartphone tries to open the URL https://makerdairy.com in a web browser. You can also use nfc stop to disable the NFC and use nfc status to check the NFC status. Connect to the Internet Thie demo also allows you to connect to a Wi-Fi network via the CLI. Perform the following steps to connect to a Wi-Fi Access Point and check the Internet connectivity: Use command wifi to print the command help information. Use command wifi scan to the nearby Wi-Fi APs. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi status to retrieve the Wi-Fi connection status. Use ping {host} to check the Internet connectivity. For example, ping Google\u2019s DNS 8.8.8.8 : ping 8 .8.8.8 Explore Further Now that you are familiar with the Pitaya Go, it's time to explore more examples and tutorials available below: How to Program Pitaya Go nRF5 SDK Tutorials Wi-Fi Tutorials OpenThread Tutorials Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Getting Started"},{"location":"getting-started/#getting-started-out-of-the-box","text":"","title":"Getting Started Out of the Box"},{"location":"getting-started/#introduction","text":"This section describes how to run the Out of Box Demo without going through the complete toolchain installation. The pre-installed demo running on the Pitaya Go board is controlled with Command Line Interface (CLI) over USB CDC ACM or Bluetooth Low Energy. You can set the LED color, get the chip temperature or control the NFC Tag, using the built-in commands. The application also allows you to connect Pitaya Go to a Wi-Fi network and ping a host in the public network.","title":"Introduction"},{"location":"getting-started/#included-in-the-box","text":"Your Pitaya Go box includes: 1x Pitaya Go board 1x NFC-A PCB Antenna with MHF I connector 1x USB-C Cable","title":"Included in the Box"},{"location":"getting-started/#assemble-the-hardware","text":"Attach the NFC-A PCB Antenna to the U.FL connector. The connector is marked NFC . Plug in the USB-C cable between your computer and the USB-C Connector. Observe that the PG (Power Good) indicator is lit, and the RGB LED is blinking green.","title":"Assemble the Hardware"},{"location":"getting-started/#set-up-with-terminal","text":"Terminal applications (for example PuTTY or screen ) run on your host PC. They provide a window where you can interact with the device. Start a terminal application. The default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1). For example: screen /dev/cu.usbmodemD2E39D222D781 115200 Note If you are using Windows 7 or earlier, you must load an additional USB CDC driver. The driver can be found in pitaya-go/external/usb_driver . Press Enter on the keyboard to bring up the usb_cli:~$ prompt. Use the Tab key to print the available commands.","title":"Set Up with Terminal"},{"location":"getting-started/#set-up-with-web-device-cli","text":"Web Device CLI is a web-based command line interface using Web Bluetooth API . It implements the Nordic UART Service (NUS) with Bluetooth Low Energy. Open the Web Device CLI page in a Chrome 56+ browser . Web Device CLI Click Connect to scan devices. Pair the Pitaya-Go discovered in the list. Observe that the RGB LED stays GREEN and the ble_cli:~$ prompt is displayed. Use the Tab key to print the available commands.","title":"Set Up with Web Device CLI"},{"location":"getting-started/#set-the-led-color","text":"Use command led to print the command help information. Use command led {R} {G} {B} to set the LED color. The parameters stand for the following: {R} : The RED value, 0 ~ 255. {G} : The GREEN value, 0 ~ 255. {B} : The BLUE value, 0 ~ 255. Set various RGB values and observe the color of LED.","title":"Set the LED Color"},{"location":"getting-started/#get-the-temperature","text":"nRF52840 chip features a temperature sensor. The temp command is available for getting the chip temperature.","title":"Get the Temperature"},{"location":"getting-started/#control-the-nfc-tag","text":"Use command nfc to print the command help information. Use command nfc start to enable the NFC. Touch the NFC PCB Antenna with the smartphone and observe that BLUE LED is lit. Observe that the smartphone tries to open the URL https://makerdairy.com in a web browser. You can also use nfc stop to disable the NFC and use nfc status to check the NFC status.","title":"Control the NFC Tag"},{"location":"getting-started/#connect-to-the-internet","text":"Thie demo also allows you to connect to a Wi-Fi network via the CLI. Perform the following steps to connect to a Wi-Fi Access Point and check the Internet connectivity: Use command wifi to print the command help information. Use command wifi scan to the nearby Wi-Fi APs. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi status to retrieve the Wi-Fi connection status. Use ping {host} to check the Internet connectivity. For example, ping Google\u2019s DNS 8.8.8.8 : ping 8 .8.8.8","title":"Connect to the Internet"},{"location":"getting-started/#explore-further","text":"Now that you are familiar with the Pitaya Go, it's time to explore more examples and tutorials available below: How to Program Pitaya Go nRF5 SDK Tutorials Wi-Fi Tutorials OpenThread Tutorials","title":"Explore Further"},{"location":"getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"programming/","text":"How to Program Pitaya Go Introduction This section describes how to program your Pitaya Go board on your system. The Pitaya Go board is pre-programmed with an Open Bootloader for Device Firmware Update (DFU) functionality and also features an SWD interface via Socket Header. So, You can easily program the board using the following tools: nRF Connect for Desktop . nRF Util from the command line. A CMSIS-DAP Debug Probe Using nRF Connect for Desktop nRF Connect for Desktop is a cross-platform tool that enables testing and development with Nordic\u2019s products for Bluetooth\u00ae Low energy. nRF Connect contains a programmer app called nRF Connect Programmer . It is a cross-platform tool that enables programming firmwares to device. Memory layout for Nordic USB devices can be displayed. Content for the HEX files can be displayed, too. Moreover, content of HEX files can be written to the devices. Install To install Programmer you can download binaries from the nRF Connect product page on Nordic Semiconductor web pages. nRF Connect currently supports the following operating systems: Windows Ubuntu Linux 64-bit macOS After nRF Connect is installed, you can find Programmer in the app list by clicking Add/remove apps . Enter DFU mode To program firmwares to Pitaya Go, the board MUST be in DFU (Device Firmware Update) mode. Perform the following steps to enter DFU mode: Connect Pitaya Go to your computer. While holding the USER button, press the RESET button. Observe that the RGB LED pulses RED, that is, the device is in DFU mode. Start nRF Connect for Desktop and launch Programmer app. Select the device in the dropdown in the upper left corner if it is shown. Observe that the memory layout of the device will be displayed. Program firmwares Perform the following steps to program firmwares: Click Add HEX file to select the application hex file to program onto the board. Click Write to begin writing the firmware. If the application requires a Softdevice, select the correct Softdevice ID. The DFU procedure starts. This may take a few seconds. Note The device will reset when the upgrade completes and Pitaya Go will no longer show up in nRF Connect unless the application used DFU Trigger Library, as it is no longer in DFU mode. You will get an warning stating \"Reopen device failed\" in this case. You can just ignore this warning. Using nRF Util nRF Util is a Python package and command-line utility that supports Device Firmware Updates (DFU) and cryptographic functionality. The nRF Util application and its library offer the following features: Device firmware update (DFU) package generation Cryptographic key generation, management, and storage Bootloader settings generation DFU procedure over any of the following transports: Bluetooth Low Energy Serial over UART Serial over USB Thread unicast Thread multicast Zigbee ANT Check out the nRF Util GitHub Repository for more details. Install from PyPI To install the latest published version from the Python Package Index simply type: pip install nrfutil Note When installing on macOS, you may need to add --ignore-installed six when running pip. Generate DFU package Generate a package ( .zip file) that you can later use to update. This command takes several options that you can list using: nrfutil pkg generate --help Below is an example of the generation of a package from an application's nrf52840_xxaa.hex file: nrfutil pkg generate --hw-version 52 --sd-req 0xAE --application-version 1 --application nrf52840_xxaa.hex nrf52840_xxaa_dfu_pkg.zip The parameters stand for the following: --sd-req : The SoftDevice firmware ID which is present on the target device. If no Softdevice present, set to 0x00 . --application-version : The application version. --application : The application firmware file. Update the package To update the package to Pitaya Go, the board MUST be in DFU mode. Perform the following steps to update the package generated above: Connect Pitaya Go to your computer. While holding the USER button, press the RESET button. Observe that the RGB LED pulses RED, that is, the device is in DFU mode. This command takes several options that you can list using: nrfutil dfu usb-serial --help Use the following command to start the DFU procedure: nrfutil dfu usb-serial -pkg nrf52840_xxaa_dfu_pkg.zip -p /dev/cu.usbmodemD2E39D222D781 The parameters stand for the following: -pkg : Filename of the DFU package. -p : Serial port address to which the device is connected. Using a CMSIS-DAP Debug Probe Pitaya Go features an SWD interface via Socket Header, which is designed for an external debug probe to debug and download code. The CMSIS-DAP (also known as DAPLink ) standard is supported by many of the most known development and debugging tools, including KEIL uVision, IAR Embedded Workbench and OpenOCD. If you have a DAPLink debug probe in your hand, you can use pyOCD to flash/erase the chip memory. pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported. The latest stable version of pyOCD may be installed via pip as follows: pip install -U pyocd Alternatively, to install the latest prerelease version from the HEAD of the master branch, you can do the following: pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip Perform the following steps to flash/erase the memory: Connect DAPLink to Pitaya Go. Use the following command to flash the board: pyocd flash -t nrf52840 nrf52840_xxaa.hex Use the following command to perform a chip erase: pyocd erase -t nrf52840 --chip Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Programming"},{"location":"programming/#how-to-program-pitaya-go","text":"","title":"How to Program Pitaya Go"},{"location":"programming/#introduction","text":"This section describes how to program your Pitaya Go board on your system. The Pitaya Go board is pre-programmed with an Open Bootloader for Device Firmware Update (DFU) functionality and also features an SWD interface via Socket Header. So, You can easily program the board using the following tools: nRF Connect for Desktop . nRF Util from the command line. A CMSIS-DAP Debug Probe","title":"Introduction"},{"location":"programming/#using-nrf-connect-for-desktop","text":"nRF Connect for Desktop is a cross-platform tool that enables testing and development with Nordic\u2019s products for Bluetooth\u00ae Low energy. nRF Connect contains a programmer app called nRF Connect Programmer . It is a cross-platform tool that enables programming firmwares to device. Memory layout for Nordic USB devices can be displayed. Content for the HEX files can be displayed, too. Moreover, content of HEX files can be written to the devices.","title":"Using nRF Connect for Desktop"},{"location":"programming/#install","text":"To install Programmer you can download binaries from the nRF Connect product page on Nordic Semiconductor web pages. nRF Connect currently supports the following operating systems: Windows Ubuntu Linux 64-bit macOS After nRF Connect is installed, you can find Programmer in the app list by clicking Add/remove apps .","title":"Install"},{"location":"programming/#enter-dfu-mode","text":"To program firmwares to Pitaya Go, the board MUST be in DFU (Device Firmware Update) mode. Perform the following steps to enter DFU mode: Connect Pitaya Go to your computer. While holding the USER button, press the RESET button. Observe that the RGB LED pulses RED, that is, the device is in DFU mode. Start nRF Connect for Desktop and launch Programmer app. Select the device in the dropdown in the upper left corner if it is shown. Observe that the memory layout of the device will be displayed.","title":"Enter DFU mode"},{"location":"programming/#program-firmwares","text":"Perform the following steps to program firmwares: Click Add HEX file to select the application hex file to program onto the board. Click Write to begin writing the firmware. If the application requires a Softdevice, select the correct Softdevice ID. The DFU procedure starts. This may take a few seconds. Note The device will reset when the upgrade completes and Pitaya Go will no longer show up in nRF Connect unless the application used DFU Trigger Library, as it is no longer in DFU mode. You will get an warning stating \"Reopen device failed\" in this case. You can just ignore this warning.","title":"Program firmwares"},{"location":"programming/#using-nrf-util","text":"nRF Util is a Python package and command-line utility that supports Device Firmware Updates (DFU) and cryptographic functionality. The nRF Util application and its library offer the following features: Device firmware update (DFU) package generation Cryptographic key generation, management, and storage Bootloader settings generation DFU procedure over any of the following transports: Bluetooth Low Energy Serial over UART Serial over USB Thread unicast Thread multicast Zigbee ANT Check out the nRF Util GitHub Repository for more details.","title":"Using nRF Util"},{"location":"programming/#install-from-pypi","text":"To install the latest published version from the Python Package Index simply type: pip install nrfutil Note When installing on macOS, you may need to add --ignore-installed six when running pip.","title":"Install from PyPI"},{"location":"programming/#generate-dfu-package","text":"Generate a package ( .zip file) that you can later use to update. This command takes several options that you can list using: nrfutil pkg generate --help Below is an example of the generation of a package from an application's nrf52840_xxaa.hex file: nrfutil pkg generate --hw-version 52 --sd-req 0xAE --application-version 1 --application nrf52840_xxaa.hex nrf52840_xxaa_dfu_pkg.zip The parameters stand for the following: --sd-req : The SoftDevice firmware ID which is present on the target device. If no Softdevice present, set to 0x00 . --application-version : The application version. --application : The application firmware file.","title":"Generate DFU package"},{"location":"programming/#update-the-package","text":"To update the package to Pitaya Go, the board MUST be in DFU mode. Perform the following steps to update the package generated above: Connect Pitaya Go to your computer. While holding the USER button, press the RESET button. Observe that the RGB LED pulses RED, that is, the device is in DFU mode. This command takes several options that you can list using: nrfutil dfu usb-serial --help Use the following command to start the DFU procedure: nrfutil dfu usb-serial -pkg nrf52840_xxaa_dfu_pkg.zip -p /dev/cu.usbmodemD2E39D222D781 The parameters stand for the following: -pkg : Filename of the DFU package. -p : Serial port address to which the device is connected.","title":"Update the package"},{"location":"programming/#using-a-cmsis-dap-debug-probe","text":"Pitaya Go features an SWD interface via Socket Header, which is designed for an external debug probe to debug and download code. The CMSIS-DAP (also known as DAPLink ) standard is supported by many of the most known development and debugging tools, including KEIL uVision, IAR Embedded Workbench and OpenOCD. If you have a DAPLink debug probe in your hand, you can use pyOCD to flash/erase the chip memory. pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported. The latest stable version of pyOCD may be installed via pip as follows: pip install -U pyocd Alternatively, to install the latest prerelease version from the HEAD of the master branch, you can do the following: pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip Perform the following steps to flash/erase the memory: Connect DAPLink to Pitaya Go. Use the following command to flash the board: pyocd flash -t nrf52840 nrf52840_xxaa.hex Use the following command to perform a chip erase: pyocd erase -t nrf52840 --chip","title":"Using a CMSIS-DAP Debug Probe"},{"location":"programming/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"where-to-buy/","text":"Where to Buy Pitaya Go Buy Online Pitaya Go is available on the following channels (click to go directly to the product): Bulk Customization We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Where to Buy"},{"location":"where-to-buy/#where-to-buy-pitaya-go","text":"","title":"Where to Buy Pitaya Go"},{"location":"where-to-buy/#buy-online","text":"Pitaya Go is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"where-to-buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Bulk &amp; Customization"},{"location":"nrf5-sdk/","text":"nRF5 SDK Essential Software Development Kit for the nRF5x Series SoC Introduction The nRF5 SDK is your first stop for building fully featured, reliable and secure applications with the nRF52 and nRF51 Series. It offers developers a wealth of varied modules and examples right across the spectrum including numerous Bluetooth Low Energy profiles, Device Firmware Upgrade (DFU), GATT serializer and driver support for all peripherals on all nRF5 Series devices. The nRF5 SDK will almost certainly have something for your needs in developing exciting yet robust wireless products. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. For more details, please visit the Nordic Semiconductor site. Our nRF5 SDK tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to build state-of-the-art IoT applications in a very short time. See Setup the nRF5 SDK for instructions on how to set up your development environment. Reference nRF5 SDK Offical Site nRF5 SDK Online Documentation Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"nrf5-sdk/#nrf5-sdk-essential-software-development-kit-for-the-nrf5x-series-soc","text":"","title":"nRF5 SDK Essential Software Development Kit for the nRF5x Series SoC"},{"location":"nrf5-sdk/#introduction","text":"The nRF5 SDK is your first stop for building fully featured, reliable and secure applications with the nRF52 and nRF51 Series. It offers developers a wealth of varied modules and examples right across the spectrum including numerous Bluetooth Low Energy profiles, Device Firmware Upgrade (DFU), GATT serializer and driver support for all peripherals on all nRF5 Series devices. The nRF5 SDK will almost certainly have something for your needs in developing exciting yet robust wireless products. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. For more details, please visit the Nordic Semiconductor site. Our nRF5 SDK tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to build state-of-the-art IoT applications in a very short time. See Setup the nRF5 SDK for instructions on how to set up your development environment.","title":"Introduction"},{"location":"nrf5-sdk/#reference","text":"nRF5 SDK Offical Site nRF5 SDK Online Documentation","title":"Reference"},{"location":"nrf5-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/build-n-run-a-first-example/","text":"Building and Running a first example This section details how to build and run the Hello World example. Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example Now it's ready to build the first example. Will use the Hello World example here to keep it simple. The Hello World example shows how to blink the RGB LED and print Hello World! to the console. It is located in pitaya-go/examples/peripheral/hello_world . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/hello_world/armgcc Run make to build the example: make Programming the firmware After compiled, the firmware is located in hello_world/armgcc/_build with the name nrf52840_xxaa.hex . Now let Pitaya Go enter the DFU (Device Firmware Update) mode, and program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Once the firmware is programmed successfully, observe that the LEDs are blinking: Run a terminal application like PuTTY or screen to print Hello World! : screen /dev/cu.usbmodemD2E39D222D781 115200 where /dev/cu.usbmodemD2E39D222D781 is the port name of the board. Replace it with your owns. Next Steps Check out more nRF5 SDK examples for Pitaya Go: Hardware Peripheral Examples Blinky Example Button Example Battery Status Example NFC Tag Example Power Profiler Example QSPI Flash Example RSSI Viewer Example Temperature Example Bluetooth Low Energy Examples BLE Blinky Example BLE Beacon Example BLE Battery Service Example BLE Heart Rate Service BLE HID Keyboard Example BLE HID Mouse Example Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Build & Run a first example"},{"location":"nrf5-sdk/build-n-run-a-first-example/#building-and-running-a-first-example","text":"This section details how to build and run the Hello World example. Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Building and Running a first example"},{"location":"nrf5-sdk/build-n-run-a-first-example/#building-the-example","text":"Now it's ready to build the first example. Will use the Hello World example here to keep it simple. The Hello World example shows how to blink the RGB LED and print Hello World! to the console. It is located in pitaya-go/examples/peripheral/hello_world . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/hello_world/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/build-n-run-a-first-example/#programming-the-firmware","text":"After compiled, the firmware is located in hello_world/armgcc/_build with the name nrf52840_xxaa.hex . Now let Pitaya Go enter the DFU (Device Firmware Update) mode, and program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/build-n-run-a-first-example/#testing","text":"Once the firmware is programmed successfully, observe that the LEDs are blinking: Run a terminal application like PuTTY or screen to print Hello World! : screen /dev/cu.usbmodemD2E39D222D781 115200 where /dev/cu.usbmodemD2E39D222D781 is the port name of the board. Replace it with your owns.","title":"Testing"},{"location":"nrf5-sdk/build-n-run-a-first-example/#next-steps","text":"Check out more nRF5 SDK examples for Pitaya Go: Hardware Peripheral Examples Blinky Example Button Example Battery Status Example NFC Tag Example Power Profiler Example QSPI Flash Example RSSI Viewer Example Temperature Example Bluetooth Low Energy Examples BLE Blinky Example BLE Beacon Example BLE Battery Service Example BLE Heart Rate Service BLE HID Keyboard Example BLE HID Mouse Example","title":"Next Steps"},{"location":"nrf5-sdk/build-n-run-a-first-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/","text":"Setup the nRF5 SDK Development Environment This section describes how to set up the nRF5 SDK development environment on your system. Set up the toolchain To build the nRF5 SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux macOS GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Tip pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. If you have a CMSIS-DAP debug probe, it's recommended to install pyOCD. Windows On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Download Start MSYS2. Update the package database and core system packages with: pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: pacman -Su Install dependencies: pacman -S git make python2 Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Run the installer and follow the given instructions. Upon completion, check the Add path to environment variable option. Then verify if the compiler works: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Linux Here we describe how to set up the toolchain on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Clone the repository Clone the pitaya-go repository from GitHub: git clone --recursive https://github.com/makerdiary/pitaya-go Or if you have already cloned the project, you may update the submodule: git submodule update --init Install the nRF5 SDK Download the SDK file nRF5_SDK_v15.2.0_9412b96 from www.nordicsemi.com . Note that the current version is 15.2.0 . Download Extract the zip file to the pitaya-go/nrf_sdks directory. This should give you the following folder structure: ./pitaya-go/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 certs \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 external \u251c\u2500\u2500 firmware \u251c\u2500\u2500 material \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 nRF5_SDK_15.2.0_9412b96 \u2514\u2500\u2500 utils To use the nRF5 SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: nRF5 SDK /components/toolchain/gcc Open the file in a text editor ( Sublime Text is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi Next Step If everything works as expected, it's ready to build and run the examples to verify the development environment setup. The steps that are described in Build Run a first example will walk you through verifying your setup with the Hello World example. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Setup the nRF5 SDK"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#setup-the-nrf5-sdk-development-environment","text":"This section describes how to set up the nRF5 SDK development environment on your system.","title":"Setup the nRF5 SDK Development Environment"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#set-up-the-toolchain","text":"To build the nRF5 SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux","title":"Set up the toolchain"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#macos","text":"GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Tip pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. If you have a CMSIS-DAP debug probe, it's recommended to install pyOCD.","title":"macOS"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#windows","text":"On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Download Start MSYS2. Update the package database and core system packages with: pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: pacman -Su Install dependencies: pacman -S git make python2 Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Run the installer and follow the given instructions. Upon completion, check the Add path to environment variable option. Then verify if the compiler works: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Windows"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#linux","text":"Here we describe how to set up the toolchain on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Linux"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#clone-the-repository","text":"Clone the pitaya-go repository from GitHub: git clone --recursive https://github.com/makerdiary/pitaya-go Or if you have already cloned the project, you may update the submodule: git submodule update --init","title":"Clone the repository"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#install-the-nrf5-sdk","text":"Download the SDK file nRF5_SDK_v15.2.0_9412b96 from www.nordicsemi.com . Note that the current version is 15.2.0 . Download Extract the zip file to the pitaya-go/nrf_sdks directory. This should give you the following folder structure: ./pitaya-go/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 certs \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 external \u251c\u2500\u2500 firmware \u251c\u2500\u2500 material \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 nRF5_SDK_15.2.0_9412b96 \u2514\u2500\u2500 utils To use the nRF5 SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: nRF5 SDK /components/toolchain/gcc Open the file in a text editor ( Sublime Text is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi","title":"Install the nRF5 SDK"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#next-step","text":"If everything works as expected, it's ready to build and run the examples to verify the development environment setup. The steps that are described in Build Run a first example will walk you through verifying your setup with the Hello World example.","title":"Next Step"},{"location":"nrf5-sdk/setup-the-nrf5-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-bas-example/","text":"BLE Battery Service Example Description The BLE Battery Service Example demonstrates how to use the Battery Service module. This module implements the Battery Service with the Battery Level characteristic. The application includes the two services: Battery Service Device Information Service When the application starts, the BSP is initialized. Next, a timer for generating battery measurements is started. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_bas . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_bas/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_bas/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Pitaya-Go ). Observe that Battery Service and Device information are shown in the connected device. Tap Battery Level and listen for notifications. The Battery Level notifications are received. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Battery Service Example"},{"location":"nrf5-sdk/ble/ble-bas-example/#ble-battery-service-example","text":"","title":"BLE Battery Service Example"},{"location":"nrf5-sdk/ble/ble-bas-example/#description","text":"The BLE Battery Service Example demonstrates how to use the Battery Service module. This module implements the Battery Service with the Battery Level characteristic. The application includes the two services: Battery Service Device Information Service When the application starts, the BSP is initialized. Next, a timer for generating battery measurements is started. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/ble/ble-bas-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_bas . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_bas/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-bas-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_bas/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-bas-example/#testing","text":"You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Pitaya-Go ). Observe that Battery Service and Device information are shown in the connected device. Tap Battery Level and listen for notifications. The Battery Level notifications are received.","title":"Testing"},{"location":"nrf5-sdk/ble/ble-bas-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-beacon-example/","text":"BLE Beacon Example Description The Beacon Example implements a transmitter beacon that broadcasts information to all compatible devices in its range as Manufacturer Specific Data in the advertisement packets. This information includes: A 128-bit UUID to identify the beacon's provider. An arbitrary Major value for coarse differentiation between beacons. An arbitrary Minor value for fine differentiation between beacons. The RSSI value of the beacon measured at 1 meter distance, which can be used for estimating the distance from the beacon. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_beacon . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_beacon/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_beacon/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing Test the Beacon Example with nRF Connect by performing the following steps: After application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. After starting discovery in nRF Connect, observe that the beacon is advertising with its Bluetooth device address without a Device Name. Tap the device to view the full advertisement data. Reference iBeacon Resource from Apple Developer Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Beacon Example"},{"location":"nrf5-sdk/ble/ble-beacon-example/#ble-beacon-example","text":"","title":"BLE Beacon Example"},{"location":"nrf5-sdk/ble/ble-beacon-example/#description","text":"The Beacon Example implements a transmitter beacon that broadcasts information to all compatible devices in its range as Manufacturer Specific Data in the advertisement packets. This information includes: A 128-bit UUID to identify the beacon's provider. An arbitrary Major value for coarse differentiation between beacons. An arbitrary Minor value for fine differentiation between beacons. The RSSI value of the beacon measured at 1 meter distance, which can be used for estimating the distance from the beacon. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/ble/ble-beacon-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_beacon . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_beacon/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-beacon-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_beacon/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-beacon-example/#testing","text":"Test the Beacon Example with nRF Connect by performing the following steps: After application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. After starting discovery in nRF Connect, observe that the beacon is advertising with its Bluetooth device address without a Device Name. Tap the device to view the full advertisement data.","title":"Testing"},{"location":"nrf5-sdk/ble/ble-beacon-example/#reference","text":"iBeacon Resource from Apple Developer","title":"Reference"},{"location":"nrf5-sdk/ble/ble-beacon-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-blinky-example/","text":"BLE Blinky Example Description The BLE Blinky Example uses the LED Button Service Server module. This module implements a custom LED Button Service with an LED and Button Characteristics that are used to toggle LEDs and receive button statuses from Pitaya Go. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_blinky . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_blinky/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing You can test the example with the nRF Connect mobile app by performing the following steps: Download the nRF Connect app from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as Pitaya-Go ). Observe that RED LED is on and GREEN LED is off. This indicates that the connections is established. Observe that the LED Button Service is shown in the connected device. It contains two characteristics: Nordic Blinky Button and Nordic Blinky LED . Enable Notify on the Nordic Blinky Button . Notifications are received when pressing or releasing the USER Button. Write 01 to the Nordic Blinky LED and observe that BLUE LED is turned on. Write 00 to the Nordic Blinky LED and observe that BLUE LED is turned off. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Blinky Example"},{"location":"nrf5-sdk/ble/ble-blinky-example/#ble-blinky-example","text":"","title":"BLE Blinky Example"},{"location":"nrf5-sdk/ble/ble-blinky-example/#description","text":"The BLE Blinky Example uses the LED Button Service Server module. This module implements a custom LED Button Service with an LED and Button Characteristics that are used to toggle LEDs and receive button statuses from Pitaya Go. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/ble/ble-blinky-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_blinky . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_blinky/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-blinky-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-blinky-example/#testing","text":"You can test the example with the nRF Connect mobile app by performing the following steps: Download the nRF Connect app from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as Pitaya-Go ). Observe that RED LED is on and GREEN LED is off. This indicates that the connections is established. Observe that the LED Button Service is shown in the connected device. It contains two characteristics: Nordic Blinky Button and Nordic Blinky LED . Enable Notify on the Nordic Blinky Button . Notifications are received when pressing or releasing the USER Button. Write 01 to the Nordic Blinky LED and observe that BLUE LED is turned on. Write 00 to the Nordic Blinky LED and observe that BLUE LED is turned off.","title":"Testing"},{"location":"nrf5-sdk/ble/ble-blinky-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/","text":"BLE HID Keyboard Example The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for keyboard. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hids_keyboard . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hids_keyboard/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_hids_keyboard/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing Use a Laptop with Bluetooth Low Energy supported to test the HID Keyboard Example. Here we use a MacBook Pro. After the application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. Go to System Preferences - Bluetooth Preferences , observe that the BLE HID keyboard named Pitaya-Go is found. Connect to the keyboard. Observe that GREEN constant light, that is, the connections is established. Open a text editing application (for example Sublime Text ). Press USER button on the board. This will send one character of the test message hello (the test message includes a carriage return) to the computer, and this will be displayed in the text editor. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE HID Keyboard Example"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/#ble-hid-keyboard-example","text":"The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for keyboard. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"BLE HID Keyboard Example"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hids_keyboard . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hids_keyboard/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hids_keyboard/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/#testing","text":"Use a Laptop with Bluetooth Low Energy supported to test the HID Keyboard Example. Here we use a MacBook Pro. After the application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. Go to System Preferences - Bluetooth Preferences , observe that the BLE HID keyboard named Pitaya-Go is found. Connect to the keyboard. Observe that GREEN constant light, that is, the connections is established. Open a text editing application (for example Sublime Text ). Press USER button on the board. This will send one character of the test message hello (the test message includes a carriage return) to the computer, and this will be displayed in the text editor.","title":"Testing"},{"location":"nrf5-sdk/ble/ble-hids-keyboard-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/","text":"BLE HID Mouse Example The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for mouse. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hids_mouse . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hids_mouse/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_hids_mouse/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing Use a Laptop with Bluetooth Low Energy supported to test the HID Mouse Example. Here we use a MacBook Pro. After the application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. Go to System Preferences - Bluetooth Preferences , observe that the BLE HID Mouse named Pitaya-Go is found. Connect to the mouse. Observe that GREEN constant light, that is, the connections is established. Press USER button on the board. Observe that the mouse pointer on the screen moves to the left. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE HID Mouse Example"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/#ble-hid-mouse-example","text":"The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for mouse. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"BLE HID Mouse Example"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hids_mouse . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hids_mouse/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hids_mouse/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/#testing","text":"Use a Laptop with Bluetooth Low Energy supported to test the HID Mouse Example. Here we use a MacBook Pro. After the application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. Go to System Preferences - Bluetooth Preferences , observe that the BLE HID Mouse named Pitaya-Go is found. Connect to the mouse. Observe that GREEN constant light, that is, the connections is established. Press USER button on the board. Observe that the mouse pointer on the screen moves to the left.","title":"Testing"},{"location":"nrf5-sdk/ble/ble-hids-mouse-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/ble/ble-hrs-example/","text":"BLE Heart Rate Sensor Example Description The BLE Heart Rate Sensor Example is an example that implements the Heart Rate profile running on Pitaya Go. The application includes the three services in the Heart Rate profile: Heart Rate Service Battery Service Device Information Service When the application starts, the BSP is initialized. Next, three timers are started. These timers control the generation of various parts of the Heart Rate Measurement characteristic value: Heart Rate RR Interval Sensor Contact Detected Also, a timer for generating battery measurements is started. When notification of Heart Rate Measurement characteristic is enabled, the Heart Rate Measurement, containing the current value for all the components of the Heart Rate Measurement characteristic, is notified each time the Heart Rate measurement timer expires. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hrs . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hrs/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ble_app_hrs/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Pitaya-Go ). Observe that the services are shown in the connected device and that you can start receiving values for the Heart Rate and the Battery Service by clicking the 'Listen for notifications'. Heart Rate notifications are received every second, and Battery Level notifications are received every two seconds. You can also use the Web Bluetooth API to test the example: Web Bluetooth API Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Heart Rate Sensor Example"},{"location":"nrf5-sdk/ble/ble-hrs-example/#ble-heart-rate-sensor-example","text":"","title":"BLE Heart Rate Sensor Example"},{"location":"nrf5-sdk/ble/ble-hrs-example/#description","text":"The BLE Heart Rate Sensor Example is an example that implements the Heart Rate profile running on Pitaya Go. The application includes the three services in the Heart Rate profile: Heart Rate Service Battery Service Device Information Service When the application starts, the BSP is initialized. Next, three timers are started. These timers control the generation of various parts of the Heart Rate Measurement characteristic value: Heart Rate RR Interval Sensor Contact Detected Also, a timer for generating battery measurements is started. When notification of Heart Rate Measurement characteristic is enabled, the Heart Rate Measurement, containing the current value for all the components of the Heart Rate Measurement characteristic, is notified each time the Heart Rate measurement timer expires. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/ble/ble-hrs-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/ble/ble_app_hrs . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/ble/ble_app_hrs/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/ble/ble-hrs-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hrs/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/ble/ble-hrs-example/#testing","text":"You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Pitaya-Go ). Observe that the services are shown in the connected device and that you can start receiving values for the Heart Rate and the Battery Service by clicking the 'Listen for notifications'. Heart Rate notifications are received every second, and Battery Level notifications are received every two seconds. You can also use the Web Bluetooth API to test the example: Web Bluetooth API","title":"Testing"},{"location":"nrf5-sdk/ble/ble-hrs-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/battery-example/","text":"Battery Status Example Description The Battery Status Example shows how to get the status of the battery charger, including the battery level, charging state and power source. The example initializes the SAADC driver and configures one channel to sample the voltage of the battery. Application Timer module is used to generate a timeout event. When the timer expires, the callback function will be called to print the measurement. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/battery_status . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/battery_status/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in battery_status/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the example by performing the following steps: Connect a 3.7V Li-Po battery with 2-pin JST-PH connector to the Battery connector. Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Observe that the battery status is printed every 2 seconds. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Battery Status Example"},{"location":"nrf5-sdk/peripheral/battery-example/#battery-status-example","text":"","title":"Battery Status Example"},{"location":"nrf5-sdk/peripheral/battery-example/#description","text":"The Battery Status Example shows how to get the status of the battery charger, including the battery level, charging state and power source. The example initializes the SAADC driver and configures one channel to sample the voltage of the battery. Application Timer module is used to generate a timeout event. When the timer expires, the callback function will be called to print the measurement. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/battery-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/battery_status . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/battery_status/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/battery-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in battery_status/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/battery-example/#testing","text":"Test the example by performing the following steps: Connect a 3.7V Li-Po battery with 2-pin JST-PH connector to the Battery connector. Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Observe that the battery status is printed every 2 seconds.","title":"Testing"},{"location":"nrf5-sdk/peripheral/battery-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/blinky-example/","text":"Blinky Example Description The Blinky Example shows how to configure the GPIO pins as outputs using the BSP module. These outputs can then be used to drive LEDs, as in this example. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/blinky/armgcc Run make to build the example: make Programming the firmware After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Once the firmware is programmed successfully, observe that the LEDs are blinking: Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Blinky Example"},{"location":"nrf5-sdk/peripheral/blinky-example/#blinky-example","text":"","title":"Blinky Example"},{"location":"nrf5-sdk/peripheral/blinky-example/#description","text":"The Blinky Example shows how to configure the GPIO pins as outputs using the BSP module. These outputs can then be used to drive LEDs, as in this example. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/blinky-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/blinky/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/blinky-example/#programming-the-firmware","text":"After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/blinky-example/#testing","text":"Once the firmware is programmed successfully, observe that the LEDs are blinking:","title":"Testing"},{"location":"nrf5-sdk/peripheral/blinky-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/button-example/","text":"Button Example Description The Button Example demonstrates how to get the USER button state with the BSP module. In this example, there are three actions that can be performed on the USER button: BSP_BUTTON_ACTION_PUSH BSP_BUTTON_ACTION_RELEASE BSP_BUTTON_ACTION_LONG_PUSH. When the button action is detected, this callback function will be called to notify the button state. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example The source code and the project file of the example are located in the following folder: pitaya-go/examples/peripheral/button . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/button/armgcc Run make to build the example: make Programming the firmware After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press the USER button and observe the LEDs and output of the terminal. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Button Example"},{"location":"nrf5-sdk/peripheral/button-example/#button-example","text":"","title":"Button Example"},{"location":"nrf5-sdk/peripheral/button-example/#description","text":"The Button Example demonstrates how to get the USER button state with the BSP module. In this example, there are three actions that can be performed on the USER button: BSP_BUTTON_ACTION_PUSH BSP_BUTTON_ACTION_RELEASE BSP_BUTTON_ACTION_LONG_PUSH. When the button action is detected, this callback function will be called to notify the button state. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/button-example/#building-the-example","text":"The source code and the project file of the example are located in the following folder: pitaya-go/examples/peripheral/button . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/button/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/button-example/#programming-the-firmware","text":"After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/button-example/#testing","text":"Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press the USER button and observe the LEDs and output of the terminal.","title":"Testing"},{"location":"nrf5-sdk/peripheral/button-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/nfc-example/","text":"NFC Tag Example Description The NFC Tag Example demonstrates how to use the NFC tag to expose a URL record to NFC devices. When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL makerdiary.com . Then it sets up the NFC library to use the generated message and sense the external NFC field. The only events handled by the application are the NFC events. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/nfc/record_url . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/nfc/record_url/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in nfc/record_url/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the NFC Tag Example with a smartphone or a tablet with NFC support by performing the following steps: Connect the additional NFC PCB Antenna to Pitaya Go through the U.FL connector. Touch the NFC PCB Antenna with the smartphone or tablet and observe that BLUE LED is lit. Observe that the smartphone/tablet tries to open the URL https://makerdairy.com in a web browser. Move the smartphone/tablet away from the NFC PCB Antenna and observe that BLUE LED turns off. One more example There is another NFC Tag Example showing how to use the NFC tag to launch an app(such as Twitter) on an Android Phone that supports NFC. You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/nfc/record_launch_app . The steps to test this example should be similar as described above. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"NFC Tag Example"},{"location":"nrf5-sdk/peripheral/nfc-example/#nfc-tag-example","text":"","title":"NFC Tag Example"},{"location":"nrf5-sdk/peripheral/nfc-example/#description","text":"The NFC Tag Example demonstrates how to use the NFC tag to expose a URL record to NFC devices. When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL makerdiary.com . Then it sets up the NFC library to use the generated message and sense the external NFC field. The only events handled by the application are the NFC events. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/nfc-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/nfc/record_url . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/nfc/record_url/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/nfc-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in nfc/record_url/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/nfc-example/#testing","text":"Test the NFC Tag Example with a smartphone or a tablet with NFC support by performing the following steps: Connect the additional NFC PCB Antenna to Pitaya Go through the U.FL connector. Touch the NFC PCB Antenna with the smartphone or tablet and observe that BLUE LED is lit. Observe that the smartphone/tablet tries to open the URL https://makerdairy.com in a web browser. Move the smartphone/tablet away from the NFC PCB Antenna and observe that BLUE LED turns off.","title":"Testing"},{"location":"nrf5-sdk/peripheral/nfc-example/#one-more-example","text":"There is another NFC Tag Example showing how to use the NFC tag to launch an app(such as Twitter) on an Android Phone that supports NFC. You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/nfc/record_launch_app . The steps to test this example should be similar as described above.","title":"One more example"},{"location":"nrf5-sdk/peripheral/nfc-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/power-profiler-example/","text":"Power Profiler Example Description The Power Profiler Example demonstrates how to place the board into a minimum power consumption state and measure the power consumed. This example application starts up, sends the Deep Power-down (DP) instruction to the QSPI flash memory, disables the Wi-Fi module, and enters the System OFF mode. The power consumed can be measured by using a digital multimeter. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Hardware Prerequisites 1x Pitaya Go board 1x Digital Multimeter 1x DC Power Supply 1x 2-pin JST cable Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/power_profile . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/power_profile Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in power_profile/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Measure the power consumed by performing the following steps: Follow the figure below to setup the hardware for current measurements: The current measurements can be done over Digital Multimeter once the current remains constant. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Power Profiler Example"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#power-profiler-example","text":"","title":"Power Profiler Example"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#description","text":"The Power Profiler Example demonstrates how to place the board into a minimum power consumption state and measure the power consumed. This example application starts up, sends the Deep Power-down (DP) instruction to the QSPI flash memory, disables the Wi-Fi module, and enters the System OFF mode. The power consumed can be measured by using a digital multimeter. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#hardware-prerequisites","text":"1x Pitaya Go board 1x Digital Multimeter 1x DC Power Supply 1x 2-pin JST cable","title":"Hardware Prerequisites"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/power_profile . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/power_profile Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in power_profile/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#testing","text":"Measure the power consumed by performing the following steps: Follow the figure below to setup the hardware for current measurements: The current measurements can be done over Digital Multimeter once the current remains constant.","title":"Testing"},{"location":"nrf5-sdk/peripheral/power-profiler-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/qspi-example/","text":"QSPI Flash Example Description The QSPI Example demonstrates the use of the QSPI peripheral with memory mounted on Pitaya Go. The application initializes the QSPI peripheral, sends configuration commands to memory, erases the memory, writes data, reads data, and compares data. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/qspi . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/qspi Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in qspi/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the QSPI Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 In the terminal, press any key to start the application. Observe the LEDs and output of the terminal. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"QSPI Flash Example"},{"location":"nrf5-sdk/peripheral/qspi-example/#qspi-flash-example","text":"","title":"QSPI Flash Example"},{"location":"nrf5-sdk/peripheral/qspi-example/#description","text":"The QSPI Example demonstrates the use of the QSPI peripheral with memory mounted on Pitaya Go. The application initializes the QSPI peripheral, sends configuration commands to memory, erases the memory, writes data, reads data, and compares data. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/qspi-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/qspi . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/qspi Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/qspi-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in qspi/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/qspi-example/#testing","text":"Test the QSPI Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 In the terminal, press any key to start the application. Observe the LEDs and output of the terminal.","title":"Testing"},{"location":"nrf5-sdk/peripheral/qspi-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/","text":"RSSI Viewer Example Description The RSSI Viewer Example shows how to behave a RSSI Viewer and send RSSI data over serial port. The nRF Connect RSSI Viewer app shows dBm per frequency in the 2400-2480 MHz range, and allows the user to tweak settings like sweep delay and animation duration. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/rssi_viewer . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/rssi_viewer Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in rssi_viewer/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the RSSI Viewer Example application by performing the following steps: Install the RSSI Viewer app in nRF Connect by clicking Add/remove apps . Launch RSSI Viewer app and connect to Pitaya Go by selecting its serial port. Observe the RSSI data chart and try to tweak settings like sweep delay and animation duration. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"RSSI Viewer Example"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#rssi-viewer-example","text":"","title":"RSSI Viewer Example"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#description","text":"The RSSI Viewer Example shows how to behave a RSSI Viewer and send RSSI data over serial port. The nRF Connect RSSI Viewer app shows dBm per frequency in the 2400-2480 MHz range, and allows the user to tweak settings like sweep delay and animation duration. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/rssi_viewer . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/rssi_viewer Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in rssi_viewer/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#testing","text":"Test the RSSI Viewer Example application by performing the following steps: Install the RSSI Viewer app in nRF Connect by clicking Add/remove apps . Launch RSSI Viewer app and connect to Pitaya Go by selecting its serial port. Observe the RSSI data chart and try to tweak settings like sweep delay and animation duration.","title":"Testing"},{"location":"nrf5-sdk/peripheral/rssi-viewer-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/peripheral/temperature-example/","text":"Temperature Example The Temperature Example shows how to use the temperature sensor inside nRF52840 chip and print the measurement. The application starts with configuring the temperature module and the console over USB CDC ACM. The main loop reads the temperature sensor and prints measurement every 500 milliseconds. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/temperature . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/temperature/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in temperature/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 In the terminal, press any key to start the example. Observe that a temperature value is printed every 500 milliseconds. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Temperature Example"},{"location":"nrf5-sdk/peripheral/temperature-example/#temperature-example","text":"The Temperature Example shows how to use the temperature sensor inside nRF52840 chip and print the measurement. The application starts with configuring the temperature module and the console over USB CDC ACM. The main loop reads the temperature sensor and prints measurement every 500 milliseconds. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Temperature Example"},{"location":"nrf5-sdk/peripheral/temperature-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/peripheral/temperature . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/peripheral/temperature/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/peripheral/temperature-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in temperature/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"nrf5-sdk/peripheral/temperature-example/#testing","text":"Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 In the terminal, press any key to start the example. Observe that a temperature value is printed every 500 milliseconds.","title":"Testing"},{"location":"nrf5-sdk/peripheral/temperature-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/","text":"OpenThread An open-source implementation of the Thread networking protocol Introduction OpenThread is a portable and flexible open-source implementation of the Thread\u00ae networking protocol, created by Nest in active collaboration with Nordic to accelerate the development of products for the connected home. Features OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support. Application Services IPv6 configuration and raw data interface UDP sockets CoAP client and server DHCPv6 client and server DNSv6 client Enhanced Features Child Supervision Inform Previous Parent on Reattach Jam Detection Periodic Parent Search NCP Support Spinel , a general purpose NCP protocol wpantund , a user-space NCP network interface driver/daemon Sniffer support via NCP Spinel nodes Border Router Web UI for configuration and management Thread Border Agent to support an External Commissioner NAT64 for connecting to IPv4 networks Thread interface driver using wpantund OpenThread Architecture OpenThread's portable nature makes no assumptions about platform features. OpenThread provides the hooks to utilize enhanced radio and crypto features, reducing system requirements, such as memory, code, and compute cycles. This can be done per platform, while retaining the ability to default to a standard configuration. See OpenThread platform designs for more information. Resources OpenThread GitHub repository openthread.io nRF5 SDK for Thread Documentation License Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"openthread/#openthread-an-open-source-implementation-of-the-thread-networking-protocol","text":"","title":"OpenThread An open-source implementation of the Thread networking protocol"},{"location":"openthread/#introduction","text":"OpenThread is a portable and flexible open-source implementation of the Thread\u00ae networking protocol, created by Nest in active collaboration with Nordic to accelerate the development of products for the connected home.","title":"Introduction"},{"location":"openthread/#features","text":"OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support. Application Services IPv6 configuration and raw data interface UDP sockets CoAP client and server DHCPv6 client and server DNSv6 client Enhanced Features Child Supervision Inform Previous Parent on Reattach Jam Detection Periodic Parent Search NCP Support Spinel , a general purpose NCP protocol wpantund , a user-space NCP network interface driver/daemon Sniffer support via NCP Spinel nodes Border Router Web UI for configuration and management Thread Border Agent to support an External Commissioner NAT64 for connecting to IPv4 networks Thread interface driver using wpantund","title":"Features"},{"location":"openthread/#openthread-architecture","text":"OpenThread's portable nature makes no assumptions about platform features. OpenThread provides the hooks to utilize enhanced radio and crypto features, reducing system requirements, such as memory, code, and compute cycles. This can be done per platform, while retaining the ability to default to a standard configuration. See OpenThread platform designs for more information.","title":"OpenThread Architecture"},{"location":"openthread/#resources","text":"OpenThread GitHub repository openthread.io nRF5 SDK for Thread Documentation","title":"Resources"},{"location":"openthread/#license","text":"Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc.","title":"License"},{"location":"openthread/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/build-n-run-thread-example/","text":"Build and Run a Thread Example This section demonstrates how to build a Thread example (like OpenThread CLI) with the nRF5 SDK for Thread and run it. Before you start building, remember to set up the Thread development environment first. See Setup the Thread SDK for details. Building OpenThread CLI You can find the source code and the project file of OpenThread CLI in the following folder: pitaya-go/examples/openthread/cli . Navigate to the directory with the OpenThread Full Thread Device (FTD) CLI Makefile: cd ./pitaya-go/examples/openthread/cli/ftd/armgcc Run make to build the example: make Programming OpenThread CLI If compiled successfully, the firmware is located in openthread/cli/ftd/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Testing Perform the following steps to test the OpenThread CLI: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter on the keyboard to bring up the OpenThread CLI prompt. Generate, view, and commit a new Active Operational Dataset: dataset init new Done dataset Active Timestamp: 1 Channel: 24 Channel Mask: 07fff800 Ext PAN ID: 57a7486ff74c8538 Mesh Local Prefix: fda9:4820:7a9c:66ba/64 Master Key: aa8da3931ffcbcb26c8b4b7c9b4114c1 Network Name: OpenThread-4d92 PAN ID: 0x4d92 PSKc: 22537a67d4040e34848d6d82ca2c313c Security Policy: 0 , onrcb Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that the device has become a Thread Leader: state leader Done View IPv6 addresses assigned to the Thread interface: ipaddr fda9:4820:7a9c:66ba:0:ff:fe00:fc00 fda9:4820:7a9c:66ba:0:ff:fe00:8800 fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 fe80:0:0:0:3c1d:5115:ccc5:6ba7 Done Next Steps Check out more OpenThread examples . Build an OpenThread Border Router with Raspberry Pi Visualize Thread Network Topology Build an OpenThread Network Sniffer to sniff packets on a Thread network. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Build & Run a Thread Example"},{"location":"openthread/build-n-run-thread-example/#build-and-run-a-thread-example","text":"This section demonstrates how to build a Thread example (like OpenThread CLI) with the nRF5 SDK for Thread and run it. Before you start building, remember to set up the Thread development environment first. See Setup the Thread SDK for details.","title":"Build and Run a Thread Example"},{"location":"openthread/build-n-run-thread-example/#building-openthread-cli","text":"You can find the source code and the project file of OpenThread CLI in the following folder: pitaya-go/examples/openthread/cli . Navigate to the directory with the OpenThread Full Thread Device (FTD) CLI Makefile: cd ./pitaya-go/examples/openthread/cli/ftd/armgcc Run make to build the example: make","title":"Building OpenThread CLI"},{"location":"openthread/build-n-run-thread-example/#programming-openthread-cli","text":"If compiled successfully, the firmware is located in openthread/cli/ftd/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming OpenThread CLI"},{"location":"openthread/build-n-run-thread-example/#testing","text":"Perform the following steps to test the OpenThread CLI: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter on the keyboard to bring up the OpenThread CLI prompt. Generate, view, and commit a new Active Operational Dataset: dataset init new Done dataset Active Timestamp: 1 Channel: 24 Channel Mask: 07fff800 Ext PAN ID: 57a7486ff74c8538 Mesh Local Prefix: fda9:4820:7a9c:66ba/64 Master Key: aa8da3931ffcbcb26c8b4b7c9b4114c1 Network Name: OpenThread-4d92 PAN ID: 0x4d92 PSKc: 22537a67d4040e34848d6d82ca2c313c Security Policy: 0 , onrcb Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that the device has become a Thread Leader: state leader Done View IPv6 addresses assigned to the Thread interface: ipaddr fda9:4820:7a9c:66ba:0:ff:fe00:fc00 fda9:4820:7a9c:66ba:0:ff:fe00:8800 fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 fe80:0:0:0:3c1d:5115:ccc5:6ba7 Done","title":"Testing"},{"location":"openthread/build-n-run-thread-example/#next-steps","text":"Check out more OpenThread examples . Build an OpenThread Border Router with Raspberry Pi Visualize Thread Network Topology Build an OpenThread Network Sniffer to sniff packets on a Thread network.","title":"Next Steps"},{"location":"openthread/build-n-run-thread-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/getting-started/","text":"Getting Started with OpenThread Overview This section describes how to quickly run an OpenThread example without going through the complete toolchain installation. There is no need to build any firmware for running it, as it uses the pre-built firmware of OpenThread CLI . This application demonstrates a minimal OpenThread application that exposes the OpenThread configuration and management interfaces via a basic command-line interface. Hardware Requirements A minimal OpenThread Mesh network requires at least two nodes. Before starting to work, prepare the following parts: Two or more Pitaya Go boards A macOS, Linux or Windows computer Flashing the OpenThread CLI Before running the OpenThread CLI application, you need to flash the boards. The pre-built firmware is located in pitaya-go/firmware/openthread/cli folder. Connect one Pitaya Go board to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Label the board Node#1 so that later you don't confuse the boards. Program the other board by repeating steps as described above. Label them Node#2 Tip See Programming section for details about how to program your Pitaya Go. Running the OpenThread CLI You can access the OpenThread CLI by using a serial terminal like screen or PuTTY . Start Node#1 Open a terminal window and run: screen /dev/cu.usbmodemD2E39D222D781 115200 where /dev/cu.usbmodemD2E39D222D781 is the port name of the board. Replace it with your owns. Press Enter on the keyboard to bring up the OpenThread CLI prompt. Generate, view, and commit a new Active Operational Dataset: dataset init new Done dataset Active Timestamp: 1 Channel: 24 Channel Mask: 07fff800 Ext PAN ID: 57a7486ff74c8538 Mesh Local Prefix: fda9:4820:7a9c:66ba/64 Master Key: aa8da3931ffcbcb26c8b4b7c9b4114c1 Network Name: OpenThread-4d92 PAN ID: 0x4d92 PSKc: 22537a67d4040e34848d6d82ca2c313c Security Policy: 0 , onrcb Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that the device has become a Thread Leader: state leader Done View IPv6 addresses assigned to Node#1 's Thread interface: ipaddr fda9:4820:7a9c:66ba:0:ff:fe00:fc00 fda9:4820:7a9c:66ba:0:ff:fe00:8800 fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 fe80:0:0:0:3c1d:5115:ccc5:6ba7 Done Start Node#2 Start another terminal window and enter the CLI. Configure Thread Master Key and PAN ID from Node#1 's Active Operational Dataset: dataset masterkey aa8da3931ffcbcb26c8b4b7c9b4114c1 Done dataset panid 0x4d92 Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that Node#2 has become a Thread Child or Router: state child Done Ping Node#1 from Node#2 In the CLI of Node#2 , ping Node#1 : ping fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 16 bytes from fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3: icmp_seq = 1 hlim = 64 time = 87ms Observe that the LEDs on Node#1 will blink when receiving the ping request. Next Steps Congratulations! You have built a simple OpenThread Mesh network with two Pitaya Go boards. You may use the CLI to change network parameters, other configurations, and perform other operations. See the OpenThread CLI Reference README.md to explore more. Follow the Setup the Thread SDK section to set up the Thread development environment on your system. Check out the Build and Run a Thread example guide to build a Thread example. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Getting Started"},{"location":"openthread/getting-started/#getting-started-with-openthread","text":"","title":"Getting Started with OpenThread"},{"location":"openthread/getting-started/#overview","text":"This section describes how to quickly run an OpenThread example without going through the complete toolchain installation. There is no need to build any firmware for running it, as it uses the pre-built firmware of OpenThread CLI . This application demonstrates a minimal OpenThread application that exposes the OpenThread configuration and management interfaces via a basic command-line interface.","title":"Overview"},{"location":"openthread/getting-started/#hardware-requirements","text":"A minimal OpenThread Mesh network requires at least two nodes. Before starting to work, prepare the following parts: Two or more Pitaya Go boards A macOS, Linux or Windows computer","title":"Hardware Requirements"},{"location":"openthread/getting-started/#flashing-the-openthread-cli","text":"Before running the OpenThread CLI application, you need to flash the boards. The pre-built firmware is located in pitaya-go/firmware/openthread/cli folder. Connect one Pitaya Go board to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Label the board Node#1 so that later you don't confuse the boards. Program the other board by repeating steps as described above. Label them Node#2 Tip See Programming section for details about how to program your Pitaya Go.","title":"Flashing the OpenThread CLI"},{"location":"openthread/getting-started/#running-the-openthread-cli","text":"You can access the OpenThread CLI by using a serial terminal like screen or PuTTY .","title":"Running the OpenThread CLI"},{"location":"openthread/getting-started/#start-node1","text":"Open a terminal window and run: screen /dev/cu.usbmodemD2E39D222D781 115200 where /dev/cu.usbmodemD2E39D222D781 is the port name of the board. Replace it with your owns. Press Enter on the keyboard to bring up the OpenThread CLI prompt. Generate, view, and commit a new Active Operational Dataset: dataset init new Done dataset Active Timestamp: 1 Channel: 24 Channel Mask: 07fff800 Ext PAN ID: 57a7486ff74c8538 Mesh Local Prefix: fda9:4820:7a9c:66ba/64 Master Key: aa8da3931ffcbcb26c8b4b7c9b4114c1 Network Name: OpenThread-4d92 PAN ID: 0x4d92 PSKc: 22537a67d4040e34848d6d82ca2c313c Security Policy: 0 , onrcb Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that the device has become a Thread Leader: state leader Done View IPv6 addresses assigned to Node#1 's Thread interface: ipaddr fda9:4820:7a9c:66ba:0:ff:fe00:fc00 fda9:4820:7a9c:66ba:0:ff:fe00:8800 fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 fe80:0:0:0:3c1d:5115:ccc5:6ba7 Done","title":"Start Node#1"},{"location":"openthread/getting-started/#start-node2","text":"Start another terminal window and enter the CLI. Configure Thread Master Key and PAN ID from Node#1 's Active Operational Dataset: dataset masterkey aa8da3931ffcbcb26c8b4b7c9b4114c1 Done dataset panid 0x4d92 Done dataset commit active Done Bring up the IPv6 interface: ifconfig up Done Start Thread protocol operation. Observe that the GREEN LED is lit. thread start Done Wait a few seconds and verify that Node#2 has become a Thread Child or Router: state child Done","title":"Start Node#2"},{"location":"openthread/getting-started/#ping-node1-from-node2","text":"In the CLI of Node#2 , ping Node#1 : ping fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3 16 bytes from fda9:4820:7a9c:66ba:4d7b:9ef4:cbdf:8cd3: icmp_seq = 1 hlim = 64 time = 87ms Observe that the LEDs on Node#1 will blink when receiving the ping request.","title":"Ping Node#1 from Node#2"},{"location":"openthread/getting-started/#next-steps","text":"Congratulations! You have built a simple OpenThread Mesh network with two Pitaya Go boards. You may use the CLI to change network parameters, other configurations, and perform other operations. See the OpenThread CLI Reference README.md to explore more. Follow the Setup the Thread SDK section to set up the Thread development environment on your system. Check out the Build and Run a Thread example guide to build a Thread example.","title":"Next Steps"},{"location":"openthread/getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/openthread-border-router/","text":"OpenThread Border Router Introduction A Thread Border Router serves as a gateway between the Internet and the Thread network. OpenThread's implementation of a Border Router is called OpenThread Border Router (OTBR). OTBR is a Thread Certified Component on the Raspberry Pi 3B with a Nordic nRF52840 NCP. A Thread Border Router minimally supports the following functions: End-to-end IP connectivity via routing between Thread devices and other external IP networks External Thread Commissioning (for example, a mobile phone) to authenticate and join a Thread device to a Thread network For more technical details, openthread.io is the best place for you. In the following section, you'll build an OpenThread Border Router with Raspberry Pi 3B and Pitaya Go. Hardware Requirements 1x Raspberry Pi 3B 1x Pitaya Go 1x 4 GB (or larger) microSD card 1x microSD card reader 1x microUSB power supply for Raspberry Pi 3B Set Up Raspberry Pi 3B Download and install Raspbian Download the RASPBIAN STRETCH LITE image to your host and follow the installation guide to install the image on an microSD card. Flash the NCP firmware OTBR runs on an NCP design. The pre-built firmware is located in the following folder: pitaya-go/firmware/openthread/ncp with the name thread_ncp_ftd_usb_pitaya_go_vx.x.x . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the NCP firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Set up the Border Router Warning Before you continue, make sure your Raspberry Pi 3B is connected to the internet using Ethernet. The bootstrap script disables the platform's Wi-Fi interface and the setup script requires internet connectivity to download and install wpantund . OTBR communicates with the Pitaya Go(serves as NCP) via wpantund . On Raspberry Pi 3B: Clone the OTBR repository: git clone https://github.com/openthread/ot-br-posix Install dependencies: cd ot-br-posix ./script/bootstrap Compile and install OTBR and wpantund . Note that this setup script uses Network Manager to automatically set up the Wi-Fi access point (AP): ./script/setup Attach the Pitaya Go to the Raspberry Pi 3B via USB. Configure the NCP device's serial port in wpantund : Determine the serial port name for the NCP device by checking /dev: ls /dev/tty* Add the serial port name to /etc/wpantund.conf . For example, for a serial port name of ttyACM0 : Config:NCP:SocketPath /dev/ttyACM0 Restart the Border Router. The OTBR service should start on boot. sudo reboot Verify services Verify that all required services are enabled: sudo systemctl status If the setup script above was successful, the RPI3B is in running state and the following services appear in the output: wpantund.service avahi-daemon.service otbr-web.service otbr-agent.service If the RPI3B is in degraded state, some other service has failed to start. Check to see which: sudo systemctl --failed If the failed service is tayga or dnsmasq , it is normal. These services are completely configured as part of the Wi-Fi Access Point Setup . Verify NCP Verify that the NCP is in the correct state: sudo wpanctl status wpanctl is a command line utility provided with wpantund . It is used to communicate with the wireless PAN interface (default is wpan0 ) that wpantund is bound to in the NCP design. If the NCP is successfully running OpenThread and is not a member of a Thread network, the output should be similar to the below: wpan0 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20180926-00632-g2279ef61; NRF52840; May 23 2019 20:44:20 Daemon:Version = 0.08.00d (/f19f0b8; May 6 2019 08:15:03) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ F4CE36BE641F74BC ] ] If the NCP:State is uninitialized , troubleshoot with the following: Verify the RPI3B has sufficient power (use the proper external AC adapter). Disconnect and reconnect the NCP device to the RPI3B. Verify that the NCP serial device is present. For example, if the device should be attached to /dev/ttyACM0 : ls /dev/ttyACM* /dev/ttyACM0 Reset the NCP with sudo wpanctl reset . Check the NCP status again with sudo wpanctl status . Use the Web GUI Now, you can use the OpenThread Border Router (OTBR) Web GUI to configure and form, join, or check the status of a Thread network. The Border Router enables Access Point mode and advertises the BorderRouter-AP network default. Connect to the BorderRouter-AP Wi-Fi network and access the Web GUI by visiting the OTBR's local IPv4 address( 10.42.0.1 default) in a mobile browser: Form a Thread network Use the Form menu option to create a new Thread network. Observe that GREEN LED on Pitaya Go is lit. Confirm by checking the Status menu option or running sudo wpanctl status on the command line of the OTBR: External Thread Commissioning OpenThread Border Router (OTBR) features a Thread Border Agent, which supports external Thread Commissioning. In external Thread Commissioning, a device outside of the Thread network (for example, a mobile phone) commissions new devices onto the network. Prepare the Joiner device You should prepare another Pitaya Go board. Flash the board with the OpenThread CLI firmware. The pre-built CLI firmware is located in pitaya-go/firmware/openthread/cli . Connect the new Pitaya Go board to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU mode. Then program the OpenThread CLI firmware. Open a terminal window and run: screen /dev/cu.usbmodemDB71638B4DB62 115200 where /dev/cu.usbmodemDB71638B4DB62 is the serial port name of the Joiner. Once the Joiner device is ready, retrieve the factory-assigned IEEE EUI-64. Use the eui64 command in the OpenThread CLI: eui64 f4ce3638d6b665ce Done Use the Thread Commissioning App External commissioning is supported by the Thread Commissioning App, available for download on the Google Play Store for Android devices. Thread Commissioning App Connect your phone to the Wi-Fi access point BorderRouter-AP , and start the Thread Commissioning App. Select the target Border Router from the available list. The name is the same as the Thread network created by the OTBR Web GUI. If the same Border Router shows up multiple times with different IPv4 and IPv6 addresses, select the one with the static IPv4 address used for the Wi-Fi access point setup ( 10.42.0.1 here). When prompted for a password, enter the passphrase (Commissioner Credential) set by the OTBR Web GUI. Commission the Joiner After connected to the Border Router, the app provides the option to scan a Connect QR Code or enter a Join Passphrase manually. Thread Connect QR Codes are created with the following text string format: v = 1 eui = f4ce3638d6b665ce cc = J01NU5 Where eui is the Joiner device's EUI64 value and cc is the Joiner Credential. Use the following tool to generator your QR Code: Generate jQuery(function(){ jQuery( \"#btn_generate\" ).click(function() { var text = $('#text_usr').val(); if(text != \"\") { jQuery('#output').empty(); jQuery('#output').qrcode({width: 200,height: 200,text: text}); } }); }) In the Thread Commissioning App, scan the Connect QR Code generated above. While the app is waiting, enter the OpenThread CLI on the Joiner device and start the Joiner role with that same Joiner Credential: ifconfig up Done joiner start J01NU5 Done Wait for the DTLS handshake to complete between the Commissioner and Joiner: Join success Join the network On the Joiner device, start the Thread protocol to automatically join the network. thread start Done Check the state after a few moments to confirm. It may initially start as a Child, but within two minutes, it will upgrade to a Router. state router Done Obtain the addresses of the joiner by typing ipaddr: ipaddr fd11:1111:1122:0:0:ff:fe00:4800 fd11:22:0:0:f8f8:d11:2fe1:64c fd11:1111:1122:0:86ab:6ec9:2c76:b685 fe80:0:0:0:a8f7:dc05:2d33:c107 Done Check the Internet connectivity Test the connectivity between the Joiner device in the Thread network and the Internet by pinging a public IPv4 address. To reach the IPv4 address from the Thread device, a Well-Known Prefix of 64:ff9b::/96 and an IPv4 address of the destination are used. For example, to ping Google\u2019s DNS 8.8.8.8 from the IPv6 address, append a hexadecimal form of the IPv6 to the Well-Known Prefix resulting in: 64:ff9b::808:808 . ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 1 hlim = 43 time = 234ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 2 hlim = 43 time = 229ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 3 hlim = 44 time = 225ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 4 hlim = 45 time = 221ms Congratulations! You've successfully created an OpenThread Border Router, while allowing the Joiner device in the Thread network communicating with the Internet. License Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"OpenThread Border Router"},{"location":"openthread/openthread-border-router/#openthread-border-router","text":"","title":"OpenThread Border Router"},{"location":"openthread/openthread-border-router/#introduction","text":"A Thread Border Router serves as a gateway between the Internet and the Thread network. OpenThread's implementation of a Border Router is called OpenThread Border Router (OTBR). OTBR is a Thread Certified Component on the Raspberry Pi 3B with a Nordic nRF52840 NCP. A Thread Border Router minimally supports the following functions: End-to-end IP connectivity via routing between Thread devices and other external IP networks External Thread Commissioning (for example, a mobile phone) to authenticate and join a Thread device to a Thread network For more technical details, openthread.io is the best place for you. In the following section, you'll build an OpenThread Border Router with Raspberry Pi 3B and Pitaya Go.","title":"Introduction"},{"location":"openthread/openthread-border-router/#hardware-requirements","text":"1x Raspberry Pi 3B 1x Pitaya Go 1x 4 GB (or larger) microSD card 1x microSD card reader 1x microUSB power supply for Raspberry Pi 3B","title":"Hardware Requirements"},{"location":"openthread/openthread-border-router/#set-up-raspberry-pi-3b","text":"","title":"Set Up Raspberry Pi 3B"},{"location":"openthread/openthread-border-router/#download-and-install-raspbian","text":"Download the RASPBIAN STRETCH LITE image to your host and follow the installation guide to install the image on an microSD card.","title":"Download and install Raspbian"},{"location":"openthread/openthread-border-router/#flash-the-ncp-firmware","text":"OTBR runs on an NCP design. The pre-built firmware is located in the following folder: pitaya-go/firmware/openthread/ncp with the name thread_ncp_ftd_usb_pitaya_go_vx.x.x . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the NCP firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Flash the NCP firmware"},{"location":"openthread/openthread-border-router/#set-up-the-border-router","text":"Warning Before you continue, make sure your Raspberry Pi 3B is connected to the internet using Ethernet. The bootstrap script disables the platform's Wi-Fi interface and the setup script requires internet connectivity to download and install wpantund . OTBR communicates with the Pitaya Go(serves as NCP) via wpantund . On Raspberry Pi 3B: Clone the OTBR repository: git clone https://github.com/openthread/ot-br-posix Install dependencies: cd ot-br-posix ./script/bootstrap Compile and install OTBR and wpantund . Note that this setup script uses Network Manager to automatically set up the Wi-Fi access point (AP): ./script/setup Attach the Pitaya Go to the Raspberry Pi 3B via USB. Configure the NCP device's serial port in wpantund : Determine the serial port name for the NCP device by checking /dev: ls /dev/tty* Add the serial port name to /etc/wpantund.conf . For example, for a serial port name of ttyACM0 : Config:NCP:SocketPath /dev/ttyACM0 Restart the Border Router. The OTBR service should start on boot. sudo reboot","title":"Set up the Border Router"},{"location":"openthread/openthread-border-router/#verify-services","text":"Verify that all required services are enabled: sudo systemctl status If the setup script above was successful, the RPI3B is in running state and the following services appear in the output: wpantund.service avahi-daemon.service otbr-web.service otbr-agent.service If the RPI3B is in degraded state, some other service has failed to start. Check to see which: sudo systemctl --failed If the failed service is tayga or dnsmasq , it is normal. These services are completely configured as part of the Wi-Fi Access Point Setup .","title":"Verify services"},{"location":"openthread/openthread-border-router/#verify-ncp","text":"Verify that the NCP is in the correct state: sudo wpanctl status wpanctl is a command line utility provided with wpantund . It is used to communicate with the wireless PAN interface (default is wpan0 ) that wpantund is bound to in the NCP design. If the NCP is successfully running OpenThread and is not a member of a Thread network, the output should be similar to the below: wpan0 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20180926-00632-g2279ef61; NRF52840; May 23 2019 20:44:20 Daemon:Version = 0.08.00d (/f19f0b8; May 6 2019 08:15:03) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ F4CE36BE641F74BC ] ] If the NCP:State is uninitialized , troubleshoot with the following: Verify the RPI3B has sufficient power (use the proper external AC adapter). Disconnect and reconnect the NCP device to the RPI3B. Verify that the NCP serial device is present. For example, if the device should be attached to /dev/ttyACM0 : ls /dev/ttyACM* /dev/ttyACM0 Reset the NCP with sudo wpanctl reset . Check the NCP status again with sudo wpanctl status .","title":"Verify NCP"},{"location":"openthread/openthread-border-router/#use-the-web-gui","text":"Now, you can use the OpenThread Border Router (OTBR) Web GUI to configure and form, join, or check the status of a Thread network. The Border Router enables Access Point mode and advertises the BorderRouter-AP network default. Connect to the BorderRouter-AP Wi-Fi network and access the Web GUI by visiting the OTBR's local IPv4 address( 10.42.0.1 default) in a mobile browser:","title":"Use the Web GUI"},{"location":"openthread/openthread-border-router/#form-a-thread-network","text":"Use the Form menu option to create a new Thread network. Observe that GREEN LED on Pitaya Go is lit. Confirm by checking the Status menu option or running sudo wpanctl status on the command line of the OTBR:","title":"Form a Thread network"},{"location":"openthread/openthread-border-router/#external-thread-commissioning","text":"OpenThread Border Router (OTBR) features a Thread Border Agent, which supports external Thread Commissioning. In external Thread Commissioning, a device outside of the Thread network (for example, a mobile phone) commissions new devices onto the network.","title":"External Thread Commissioning"},{"location":"openthread/openthread-border-router/#prepare-the-joiner-device","text":"You should prepare another Pitaya Go board. Flash the board with the OpenThread CLI firmware. The pre-built CLI firmware is located in pitaya-go/firmware/openthread/cli . Connect the new Pitaya Go board to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU mode. Then program the OpenThread CLI firmware. Open a terminal window and run: screen /dev/cu.usbmodemDB71638B4DB62 115200 where /dev/cu.usbmodemDB71638B4DB62 is the serial port name of the Joiner. Once the Joiner device is ready, retrieve the factory-assigned IEEE EUI-64. Use the eui64 command in the OpenThread CLI: eui64 f4ce3638d6b665ce Done","title":"Prepare the Joiner device"},{"location":"openthread/openthread-border-router/#use-the-thread-commissioning-app","text":"External commissioning is supported by the Thread Commissioning App, available for download on the Google Play Store for Android devices. Thread Commissioning App Connect your phone to the Wi-Fi access point BorderRouter-AP , and start the Thread Commissioning App. Select the target Border Router from the available list. The name is the same as the Thread network created by the OTBR Web GUI. If the same Border Router shows up multiple times with different IPv4 and IPv6 addresses, select the one with the static IPv4 address used for the Wi-Fi access point setup ( 10.42.0.1 here). When prompted for a password, enter the passphrase (Commissioner Credential) set by the OTBR Web GUI.","title":"Use the Thread Commissioning App"},{"location":"openthread/openthread-border-router/#commission-the-joiner","text":"After connected to the Border Router, the app provides the option to scan a Connect QR Code or enter a Join Passphrase manually. Thread Connect QR Codes are created with the following text string format: v = 1 eui = f4ce3638d6b665ce cc = J01NU5 Where eui is the Joiner device's EUI64 value and cc is the Joiner Credential. Use the following tool to generator your QR Code: Generate jQuery(function(){ jQuery( \"#btn_generate\" ).click(function() { var text = $('#text_usr').val(); if(text != \"\") { jQuery('#output').empty(); jQuery('#output').qrcode({width: 200,height: 200,text: text}); } }); }) In the Thread Commissioning App, scan the Connect QR Code generated above. While the app is waiting, enter the OpenThread CLI on the Joiner device and start the Joiner role with that same Joiner Credential: ifconfig up Done joiner start J01NU5 Done Wait for the DTLS handshake to complete between the Commissioner and Joiner: Join success","title":"Commission the Joiner"},{"location":"openthread/openthread-border-router/#join-the-network","text":"On the Joiner device, start the Thread protocol to automatically join the network. thread start Done Check the state after a few moments to confirm. It may initially start as a Child, but within two minutes, it will upgrade to a Router. state router Done Obtain the addresses of the joiner by typing ipaddr: ipaddr fd11:1111:1122:0:0:ff:fe00:4800 fd11:22:0:0:f8f8:d11:2fe1:64c fd11:1111:1122:0:86ab:6ec9:2c76:b685 fe80:0:0:0:a8f7:dc05:2d33:c107 Done","title":"Join the network"},{"location":"openthread/openthread-border-router/#check-the-internet-connectivity","text":"Test the connectivity between the Joiner device in the Thread network and the Internet by pinging a public IPv4 address. To reach the IPv4 address from the Thread device, a Well-Known Prefix of 64:ff9b::/96 and an IPv4 address of the destination are used. For example, to ping Google\u2019s DNS 8.8.8.8 from the IPv6 address, append a hexadecimal form of the IPv6 to the Well-Known Prefix resulting in: 64:ff9b::808:808 . ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 1 hlim = 43 time = 234ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 2 hlim = 43 time = 229ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 3 hlim = 44 time = 225ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 4 hlim = 45 time = 221ms","title":"Check the Internet connectivity"},{"location":"openthread/openthread-border-router/#congratulations","text":"You've successfully created an OpenThread Border Router, while allowing the Joiner device in the Thread network communicating with the Internet.","title":"Congratulations!"},{"location":"openthread/openthread-border-router/#license","text":"Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc .","title":"License"},{"location":"openthread/openthread-border-router/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/setup-the-thread-sdk/","text":"Setup the Thread SDK This section describes how to set up the Thread SDK development environment on your system. Set up the toolchain To build the Thread SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux macOS GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Tip pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. If you have a CMSIS-DAP debug probe, it's recommended to install pyOCD. Windows On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Download Start MSYS2. Update the package database and core system packages with: pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: pacman -Su Install dependencies: pacman -S git make python2 Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Run the installer and follow the given instructions. Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Linux Here we describe how to set up the toolchain on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Clone the repository Clone the pitaya-go repository from GitHub: git clone --recursive https://github.com/makerdiary/pitaya-go Or if you have already cloned the project, you may update the submodule: git submodule update --init Install the nRF5 SDK for Thread The following steps show you how to install and set up the nRF5 SDK for Thread. Download the SDK file nRF5 SDK for Thread and Zigbee V3.1.0 from www.nordicsemi.com . Extract the zip file to this directory. This should give you the following folder structure: ./pitaya-go/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 certs \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 external \u251c\u2500\u2500 firmware \u251c\u2500\u2500 material \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 nRF5SDKforThreadandZigbeev310c7c4730 \u2502 \u2514\u2500\u2500 nRF5_SDK_15.2.0_9412b96 \u2514\u2500\u2500 utils To use this SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: nRF5 SDK for Thread and Zigbee /components/toolchain/gcc Open the file in a text editor, and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-7-2018-q2-update/bin/ GNU_VERSION ? = 7 .3.1 GNU_PREFIX ? = arm-none-eabi Next Step If everything works as expected, it's ready to build and run the examples to verify the development environment setup. Follow the steps in Build Run a Thread example to go on. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Setup the Thread SDK"},{"location":"openthread/setup-the-thread-sdk/#setup-the-thread-sdk","text":"This section describes how to set up the Thread SDK development environment on your system.","title":"Setup the Thread SDK"},{"location":"openthread/setup-the-thread-sdk/#set-up-the-toolchain","text":"To build the Thread SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux","title":"Set up the toolchain"},{"location":"openthread/setup-the-thread-sdk/#macos","text":"GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Tip pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. If you have a CMSIS-DAP debug probe, it's recommended to install pyOCD.","title":"macOS"},{"location":"openthread/setup-the-thread-sdk/#windows","text":"On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Download Start MSYS2. Update the package database and core system packages with: pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: pacman -Su Install dependencies: pacman -S git make python2 Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Run the installer and follow the given instructions. Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Windows"},{"location":"openthread/setup-the-thread-sdk/#linux","text":"Here we describe how to set up the toolchain on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = the path to the extracted directory : ${ PATH } Type the following in your terminal to verify if mergehex works: mergehex --version (Optional) Install the latest stable version of pyOCD via pip as follows: pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Linux"},{"location":"openthread/setup-the-thread-sdk/#clone-the-repository","text":"Clone the pitaya-go repository from GitHub: git clone --recursive https://github.com/makerdiary/pitaya-go Or if you have already cloned the project, you may update the submodule: git submodule update --init","title":"Clone the repository"},{"location":"openthread/setup-the-thread-sdk/#install-the-nrf5-sdk-for-thread","text":"The following steps show you how to install and set up the nRF5 SDK for Thread. Download the SDK file nRF5 SDK for Thread and Zigbee V3.1.0 from www.nordicsemi.com . Extract the zip file to this directory. This should give you the following folder structure: ./pitaya-go/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 certs \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 external \u251c\u2500\u2500 firmware \u251c\u2500\u2500 material \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 nRF5SDKforThreadandZigbeev310c7c4730 \u2502 \u2514\u2500\u2500 nRF5_SDK_15.2.0_9412b96 \u2514\u2500\u2500 utils To use this SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: nRF5 SDK for Thread and Zigbee /components/toolchain/gcc Open the file in a text editor, and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-7-2018-q2-update/bin/ GNU_VERSION ? = 7 .3.1 GNU_PREFIX ? = arm-none-eabi","title":"Install the nRF5 SDK for Thread"},{"location":"openthread/setup-the-thread-sdk/#next-step","text":"If everything works as expected, it's ready to build and run the examples to verify the development environment setup. Follow the steps in Build Run a Thread example to go on.","title":"Next Step"},{"location":"openthread/setup-the-thread-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/thread-network-sniffer/","text":"Build a Thread Network Sniffer Overivew During development, you may need to check what kind of data is wirelessly transmitted over the Thread network. With Pyspinel and Wireshark, you can set up a sniffer which allows to dynamically monitor the IEEE 802.15.4 wireless traffic. The Pyspinel sniffer tool connects to a Thread NCP device and converts it into a promiscuous packet sniffer, generating a pcap (packet capture) stream to be saved or piped directly into Wireshark. Wireshark is an open-source tool that can decode network protocols in the Thread stack, such as IEEE 802.15.4, 6LoWPAN, IPv6, MLE (Mesh Link Establishment), UDP, and CoAP. This section describes how to set up a Thread Sniffer, which can help you to efficiently analyze Thread network traffic. Requirements macOS or Ubuntu machine Pitaya Go Python 2.7 or Python 3 Wireshark 2.4.1 or newer Installation Set up the sniffer environment Clone and install Pyspinel and dependencies: git clone https://github.com/openthread/pyspinel cd pyspinel pip install --user future pyserial ipaddress Install Wireshark On MacOS, go to the Wireshark Download page and install the current stable release of Wireshark. On Ubuntu Linux, you can run the following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark Flash the NCP Radio firmware The pre-built firmware is located in pitaya-go/firmware/openthread/ncp with the name thread_ncp_radio_usb_pitaya_go_vx.x.x . Connect Pitaya Go to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Thread network properties Before continuing, get the following properties for the Thread network you wish to sniff. You'll need them for Wireshark configuration and running the Pyspinel sniffer. Mesh Local Prefix To get the Mesh Local Prefix from a device in the target Thread network: Using the OpenThread CLI: dataset active Active Timestamp: 0 Channel: 15 Channel Mask: 07fff800 Ext PAN ID: 1111111122222222 Mesh Local Prefix: fd11:1111:1122:0/64 Master Key: 00112233445566778899aabbccddeeff Network Name: OpenThreadDemo PAN ID: 0x1234 PSKc: 61e1206d2c2b46e079eb775f41fc7219 Security Policy: 672 , onrcb Done Using wpanctl with an NCP: $ sudo wpanctl getprop IPv6:MeshLocalPrefix IPv6:MeshLocalPrefix = fd11:1111:1122::/64 Using the OTBR Web GUI, select Status . The Mesh Local Prefix is listed as IPv6:MeshLocalPrefix similar to wpanctl . Channel To get the Channel from a device in the target Thread network: Using the OpenThread CLI: channel 15 Done Using wpanctl with an NCP: $ sudo wpanctl getprop NCP:Channel NCP:Channel = 15 Using the OTBR Web GUI, select Status . The Channel is listed as NCP:Channel similar to wpanctl . Master Key The Thread network Master Key is used by Wireshark to decrypt packets after capture. To get the Master Key from a device in the target Thread network: Using the OpenThread CLI: masterkey 00112233445566778899aabbccddeeff Done Using wpanctl with an NCP: $ sudo wpanctl getprop Network:Key Network:Key = [ 00112233445566778899AABBCCDDEEFF ] Note The Thread network Master Key is not available in the OTBR Web GUI. Wireshark configuration - protocols Wireshark must be configured to properly show Thread packets. Select Preferences... in Wireshark and expand the Protocols section. 6LoWPAN Select 6LoWPAN from the list of protocols and verify or change the following settings: Uncheck Derive ID according to RFC 4944 . Update Context 0 with the Mesh Local Prefix for the target Thread network. Wireshark uses context configurations to parse the compressed IPv6 address and display the IPv6 source and destination addresses correctly. CoAP Select CoAP from the list of protocols and set CoAP UDP Port to 61631 . This ensures TMF messages (like address solicit) are displayed. IEEE 802.15.4 Select IEEE 802.15.4 from the list of protocols and verify or change the following settings: Set 802.15.4 Ethertype (in hex) to 0x809a . Set the Security Suite (802.15.4-2003) to AES-128 Encryption, 32-bit Integrity Protection . Click the Edit... button next to Decryption Keys , which is where you add the Thread network Master Key for packet decryption. a. Click + to add a Decryption key . b. Enter the Thread network Master Key into the Decryption key column. c Enter 1 as the Decryption key index . d. Select Thread hash from the Key hash column listbox. e. Click OK to save the decryption key. Thread Select Thread from the list of protocols and verify or change the following settings: Enter 00000000 for the Thread sequence counter . Uncheck Use PAN ID as first two octets of master key . Check Automatically acquire Thread sequence counter . Click the OK button to save any protocol changes. Note Some Thread traffic might be analyzed as the ZigBee protocol. To correctly display these two protocols, edit the enabled protocols in Wireshark: In Wireshark, go to Analyze Enabled Protocols . Uncheck the following protocols: LwMesh ZigBee ZigBee Green Power Wireshark configuration - RSSI To display RSSI in Wireshark: Go to Preferences Protocols IEEE 802.15.4 . Check TI CC24xx FCS format . Click OK to save and return to the Preferences menu. From Preferences , select Appearance Columns . Add a new entry: Title: RSSI Type: Custom Fields: wpan.rssi Run the sniffer Make sure to use the specific device path for your NCP and the channel for the Thread network you are attempting to sniff. Change to the pyspinel directory and start Wireshark with the following command: sudo python ./sniffer.py -c 15 -u /dev/cu.usbmodemDB71638B4DB62 --crc --rssi -b 115200 | wireshark -k -i - The parameters stand for the following: -c : Thread Channel -u : The NCP device path \u2013crc : Disable the wrong FCS warning resulting from the fact that Nordic radio replaces one byte of CRC with LQI after a packet is received and verified. --rssi : Ensure the RSSI is included in the pcap output. -b : Baud rate You should now be able to see the packets and related protocols for this configuration in Wireshark: Reference For more information on how to use Pyspinel and Wireshark, see the following: Spinel sniffer reference wireshark.org openthread.io - Packet sniffing with Pyspinel License Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Thread Network Sniffer"},{"location":"openthread/thread-network-sniffer/#build-a-thread-network-sniffer","text":"","title":"Build a Thread Network Sniffer"},{"location":"openthread/thread-network-sniffer/#overivew","text":"During development, you may need to check what kind of data is wirelessly transmitted over the Thread network. With Pyspinel and Wireshark, you can set up a sniffer which allows to dynamically monitor the IEEE 802.15.4 wireless traffic. The Pyspinel sniffer tool connects to a Thread NCP device and converts it into a promiscuous packet sniffer, generating a pcap (packet capture) stream to be saved or piped directly into Wireshark. Wireshark is an open-source tool that can decode network protocols in the Thread stack, such as IEEE 802.15.4, 6LoWPAN, IPv6, MLE (Mesh Link Establishment), UDP, and CoAP. This section describes how to set up a Thread Sniffer, which can help you to efficiently analyze Thread network traffic.","title":"Overivew"},{"location":"openthread/thread-network-sniffer/#requirements","text":"macOS or Ubuntu machine Pitaya Go Python 2.7 or Python 3 Wireshark 2.4.1 or newer","title":"Requirements"},{"location":"openthread/thread-network-sniffer/#installation","text":"","title":"Installation"},{"location":"openthread/thread-network-sniffer/#set-up-the-sniffer-environment","text":"Clone and install Pyspinel and dependencies: git clone https://github.com/openthread/pyspinel cd pyspinel pip install --user future pyserial ipaddress","title":"Set up the sniffer environment"},{"location":"openthread/thread-network-sniffer/#install-wireshark","text":"On MacOS, go to the Wireshark Download page and install the current stable release of Wireshark. On Ubuntu Linux, you can run the following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark","title":"Install Wireshark"},{"location":"openthread/thread-network-sniffer/#flash-the-ncp-radio-firmware","text":"The pre-built firmware is located in pitaya-go/firmware/openthread/ncp with the name thread_ncp_radio_usb_pitaya_go_vx.x.x . Connect Pitaya Go to your PC using the USB-C cable. While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Flash the NCP Radio firmware"},{"location":"openthread/thread-network-sniffer/#thread-network-properties","text":"Before continuing, get the following properties for the Thread network you wish to sniff. You'll need them for Wireshark configuration and running the Pyspinel sniffer.","title":"Thread network properties"},{"location":"openthread/thread-network-sniffer/#mesh-local-prefix","text":"To get the Mesh Local Prefix from a device in the target Thread network: Using the OpenThread CLI: dataset active Active Timestamp: 0 Channel: 15 Channel Mask: 07fff800 Ext PAN ID: 1111111122222222 Mesh Local Prefix: fd11:1111:1122:0/64 Master Key: 00112233445566778899aabbccddeeff Network Name: OpenThreadDemo PAN ID: 0x1234 PSKc: 61e1206d2c2b46e079eb775f41fc7219 Security Policy: 672 , onrcb Done Using wpanctl with an NCP: $ sudo wpanctl getprop IPv6:MeshLocalPrefix IPv6:MeshLocalPrefix = fd11:1111:1122::/64 Using the OTBR Web GUI, select Status . The Mesh Local Prefix is listed as IPv6:MeshLocalPrefix similar to wpanctl .","title":"Mesh Local Prefix"},{"location":"openthread/thread-network-sniffer/#channel","text":"To get the Channel from a device in the target Thread network: Using the OpenThread CLI: channel 15 Done Using wpanctl with an NCP: $ sudo wpanctl getprop NCP:Channel NCP:Channel = 15 Using the OTBR Web GUI, select Status . The Channel is listed as NCP:Channel similar to wpanctl .","title":"Channel"},{"location":"openthread/thread-network-sniffer/#master-key","text":"The Thread network Master Key is used by Wireshark to decrypt packets after capture. To get the Master Key from a device in the target Thread network: Using the OpenThread CLI: masterkey 00112233445566778899aabbccddeeff Done Using wpanctl with an NCP: $ sudo wpanctl getprop Network:Key Network:Key = [ 00112233445566778899AABBCCDDEEFF ] Note The Thread network Master Key is not available in the OTBR Web GUI.","title":"Master Key"},{"location":"openthread/thread-network-sniffer/#wireshark-configuration-protocols","text":"Wireshark must be configured to properly show Thread packets. Select Preferences... in Wireshark and expand the Protocols section.","title":"Wireshark configuration - protocols"},{"location":"openthread/thread-network-sniffer/#6lowpan","text":"Select 6LoWPAN from the list of protocols and verify or change the following settings: Uncheck Derive ID according to RFC 4944 . Update Context 0 with the Mesh Local Prefix for the target Thread network. Wireshark uses context configurations to parse the compressed IPv6 address and display the IPv6 source and destination addresses correctly.","title":"6LoWPAN"},{"location":"openthread/thread-network-sniffer/#coap","text":"Select CoAP from the list of protocols and set CoAP UDP Port to 61631 . This ensures TMF messages (like address solicit) are displayed.","title":"CoAP"},{"location":"openthread/thread-network-sniffer/#ieee-802154","text":"Select IEEE 802.15.4 from the list of protocols and verify or change the following settings: Set 802.15.4 Ethertype (in hex) to 0x809a . Set the Security Suite (802.15.4-2003) to AES-128 Encryption, 32-bit Integrity Protection . Click the Edit... button next to Decryption Keys , which is where you add the Thread network Master Key for packet decryption. a. Click + to add a Decryption key . b. Enter the Thread network Master Key into the Decryption key column. c Enter 1 as the Decryption key index . d. Select Thread hash from the Key hash column listbox. e. Click OK to save the decryption key.","title":"IEEE 802.15.4"},{"location":"openthread/thread-network-sniffer/#thread","text":"Select Thread from the list of protocols and verify or change the following settings: Enter 00000000 for the Thread sequence counter . Uncheck Use PAN ID as first two octets of master key . Check Automatically acquire Thread sequence counter . Click the OK button to save any protocol changes. Note Some Thread traffic might be analyzed as the ZigBee protocol. To correctly display these two protocols, edit the enabled protocols in Wireshark: In Wireshark, go to Analyze Enabled Protocols . Uncheck the following protocols: LwMesh ZigBee ZigBee Green Power","title":"Thread"},{"location":"openthread/thread-network-sniffer/#wireshark-configuration-rssi","text":"To display RSSI in Wireshark: Go to Preferences Protocols IEEE 802.15.4 . Check TI CC24xx FCS format . Click OK to save and return to the Preferences menu. From Preferences , select Appearance Columns . Add a new entry: Title: RSSI Type: Custom Fields: wpan.rssi","title":"Wireshark configuration - RSSI"},{"location":"openthread/thread-network-sniffer/#run-the-sniffer","text":"Make sure to use the specific device path for your NCP and the channel for the Thread network you are attempting to sniff. Change to the pyspinel directory and start Wireshark with the following command: sudo python ./sniffer.py -c 15 -u /dev/cu.usbmodemDB71638B4DB62 --crc --rssi -b 115200 | wireshark -k -i - The parameters stand for the following: -c : Thread Channel -u : The NCP device path \u2013crc : Disable the wrong FCS warning resulting from the fact that Nordic radio replaces one byte of CRC with LQI after a packet is received and verified. --rssi : Ensure the RSSI is included in the pcap output. -b : Baud rate You should now be able to see the packets and related protocols for this configuration in Wireshark:","title":"Run the sniffer"},{"location":"openthread/thread-network-sniffer/#reference","text":"For more information on how to use Pyspinel and Wireshark, see the following: Spinel sniffer reference wireshark.org openthread.io - Packet sniffing with Pyspinel","title":"Reference"},{"location":"openthread/thread-network-sniffer/#license","text":"Portions of this page are reproduced from work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License . Thread is a registered trademark of the Thread Group, Inc .","title":"License"},{"location":"openthread/thread-network-sniffer/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"openthread/thread-topology-monitor/","text":"Thread Topology Monitor This section describes how to set up the nRF Thread Topology Monitor to visualize the current network topology. Introduction nRF Thread Topology Monitor is a cross-platform tool that enables developers to visualize Thread mesh network topology in real time. The tool is supported on Windows and Linux with separate downloads for each platform. It requires a serial connection to an nRF52840 board with Nordic\u2019s Thread solution. nRF Thread Topology Monitor uses diagnostic mechanisms of the Thread protocol to retrieve information about routing tables of each Thread Router currently attached to the network. The tool also allows to identify a particular device in the network using LEDs by interacting with the Thread BSP solution. You may assign a custom label to a Thread node and store it in persistent memory on the PC side, which helps to track topology changes. Installation Navigate to nRF Thread Topology Monitor page and download one of the following packages: Windows: nRF_TTM-win32-x64_v0.12.0-1.alpha Linux: nRF_TTM-linux-x64_v0.12.0-1.alpha.tar.gz Extract the package. Run the nRF Thread Topology Monitor executable file nRF_TTM . Flashing the OpenThread CLI nRF Thread Topology Monitor requires OpenThread CLI firmware running on your board. The firmware is located in pitaya-go/firmware/openthread/cli with the name thread_cli_ftd_usb_pitaya_go_vx.x.x . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go. Viewing network topology The following steps will show you how to set up the nRF Thread Topology Monitor: Connect Pitaya Go to your PC using the USB-C cable. In the navigation bar, click Select serial port . Click the Show all button in the dropdown menu and select the serial port. Click Start scan to attach the board to the Thread network and to start polling nodes to get information on the current topology. Try to attach other Thread devices to the network. The nRF Thread Topology Monitor will visualize them as shown in the figure below. Tip During the device configuration, you can specify the parameters of the Thread Network: Radio channel Network PAN ID Network Master Key Reference nRF Thread Topology Monitor Product Page nRF Thread Topology Monitor Documentation Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Thread Topology Monitor"},{"location":"openthread/thread-topology-monitor/#thread-topology-monitor","text":"This section describes how to set up the nRF Thread Topology Monitor to visualize the current network topology.","title":"Thread Topology Monitor"},{"location":"openthread/thread-topology-monitor/#introduction","text":"nRF Thread Topology Monitor is a cross-platform tool that enables developers to visualize Thread mesh network topology in real time. The tool is supported on Windows and Linux with separate downloads for each platform. It requires a serial connection to an nRF52840 board with Nordic\u2019s Thread solution. nRF Thread Topology Monitor uses diagnostic mechanisms of the Thread protocol to retrieve information about routing tables of each Thread Router currently attached to the network. The tool also allows to identify a particular device in the network using LEDs by interacting with the Thread BSP solution. You may assign a custom label to a Thread node and store it in persistent memory on the PC side, which helps to track topology changes.","title":"Introduction"},{"location":"openthread/thread-topology-monitor/#installation","text":"Navigate to nRF Thread Topology Monitor page and download one of the following packages: Windows: nRF_TTM-win32-x64_v0.12.0-1.alpha Linux: nRF_TTM-linux-x64_v0.12.0-1.alpha.tar.gz Extract the package. Run the nRF Thread Topology Monitor executable file nRF_TTM .","title":"Installation"},{"location":"openthread/thread-topology-monitor/#flashing-the-openthread-cli","text":"nRF Thread Topology Monitor requires OpenThread CLI firmware running on your board. The firmware is located in pitaya-go/firmware/openthread/cli with the name thread_cli_ftd_usb_pitaya_go_vx.x.x . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. Tip See Programming section for details about how to program your Pitaya Go.","title":"Flashing the OpenThread CLI"},{"location":"openthread/thread-topology-monitor/#viewing-network-topology","text":"The following steps will show you how to set up the nRF Thread Topology Monitor: Connect Pitaya Go to your PC using the USB-C cable. In the navigation bar, click Select serial port . Click the Show all button in the dropdown menu and select the serial port. Click Start scan to attach the board to the Thread network and to start polling nodes to get information on the current topology. Try to attach other Thread devices to the network. The nRF Thread Topology Monitor will visualize them as shown in the figure below. Tip During the device configuration, you can specify the parameters of the Thread Network: Radio channel Network PAN ID Network Master Key","title":"Viewing network topology"},{"location":"openthread/thread-topology-monitor/#reference","text":"nRF Thread Topology Monitor Product Page nRF Thread Topology Monitor Documentation","title":"Reference"},{"location":"openthread/thread-topology-monitor/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/","text":"Wi-Fi Tutorials Introduction The Wi-Fi tutorials describe the use of the ATWINC1500B Wi-Fi Network Controller on Pitaya Go to build state-of-the-art Internet of Things (IoT) applications. These tutorials consist of several example codes and projects. The examples are organized in different levels of codes to explain Wi-Fi Network Controller API usage \u2013 from basic Wi-Fi operations to advanced topics. These examples are categorized as: Basic Examples Chip Info Example MAC Address Example STA Mode Example Signal Strength Example AP Mode Example Power Save Mode Example HTTP Provision Example Protocol Examples Ping Request Example TCP Client Example TCP Server Example UDP Client Example UDP Server Example NTP Time Client Example Advanced Examples MQTT Client Example SSL Connection Example Weather Client Example The tutorials also explain how to update the Wi-Fi firmware and create custom TLS certificates: Update Wi-Fi Firmware Create Custom TLS Certificates Reference Microchip ATWINC1500 Documents Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"wifi/#wi-fi-tutorials","text":"","title":"Wi-Fi Tutorials"},{"location":"wifi/#introduction","text":"The Wi-Fi tutorials describe the use of the ATWINC1500B Wi-Fi Network Controller on Pitaya Go to build state-of-the-art Internet of Things (IoT) applications. These tutorials consist of several example codes and projects. The examples are organized in different levels of codes to explain Wi-Fi Network Controller API usage \u2013 from basic Wi-Fi operations to advanced topics. These examples are categorized as: Basic Examples Chip Info Example MAC Address Example STA Mode Example Signal Strength Example AP Mode Example Power Save Mode Example HTTP Provision Example Protocol Examples Ping Request Example TCP Client Example TCP Server Example UDP Client Example UDP Server Example NTP Time Client Example Advanced Examples MQTT Client Example SSL Connection Example Weather Client Example The tutorials also explain how to update the Wi-Fi firmware and create custom TLS certificates: Update Wi-Fi Firmware Create Custom TLS Certificates","title":"Introduction"},{"location":"wifi/#reference","text":"Microchip ATWINC1500 Documents","title":"Reference"},{"location":"wifi/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/create-tls-certificates/","text":"How to Create Custom TLS Certificates Introduction This guide explains the required procedures to create and sign custom certificates using OpenSSL. To use this guide you must install OpenSSL on your machine. OpenSSL is an open-source implementation of the SSL and TLS protocols. The core library, written in the C programming language, implements basic cryptographic functions and provides various utility functions. OpenSSL can be downloaded from the following URL: https://www.openssl.org/source/ . Generate Certificates After installing OpenSSL, perform the following steps: Generate a key for the CA (certification authority). To generate a 2048-bit long RSA (creates a new file PitayaRootCARSA.key to store the random key), using the following command: openssl genrsa -out PitayaRootCARSA.key 2048 Create your self-signed root CA certificate PitayaRoot.crt . You need to provide some data for your Root certificate, using the following command: openssl req -new -x509 -days 1826 -key PitayaRootCARSA.key -out PitayaRoot.crt Create the custom certificate, which is signed by the CA root certificate created earlier. First, generate the pitaya_rsa.key , using the following command: openssl genrsa -out pitaya_rsa.key 2048 To generate a certificate request file (CSR) using this generated key, use the following command: openssl req -new -key pitaya_rsa.key -out pitaya_rsa.csr Process the request for the certificate and get it signed by the root CA, using the following command: openssl x509 -req -days 730 -in pitaya_rsa.csr -CA PitayaRoot.crt -CAkey PitayaRootCARSA.key -CAcreateserial -out pitaya_rsa.crt Convert X.509 Certificates The most known encodings for the X.509 digital certificates are PEM and DER formats. The PEM format is base64 encoding of the DER enclosed with messages -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- . The current implementation of the WINC root_certificate_downloader supports only DER format. If the certificate is not in DER format, it must be converted first. The OpenSSL is used for certificate conversion by the following command: openssl x509 -outform der -in PitayaRoot.crt -out PitayaRoot.cer openssl x509 -outform der -in pitaya_rsa.crt -out pitaya_rsa.cer Download Certificates Follow the sections below to download the certificates: Download Root Certificates Download TLS Certificates Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create Custom TLS Certificates"},{"location":"wifi/create-tls-certificates/#how-to-create-custom-tls-certificates","text":"","title":"How to Create Custom TLS Certificates"},{"location":"wifi/create-tls-certificates/#introduction","text":"This guide explains the required procedures to create and sign custom certificates using OpenSSL. To use this guide you must install OpenSSL on your machine. OpenSSL is an open-source implementation of the SSL and TLS protocols. The core library, written in the C programming language, implements basic cryptographic functions and provides various utility functions. OpenSSL can be downloaded from the following URL: https://www.openssl.org/source/ .","title":"Introduction"},{"location":"wifi/create-tls-certificates/#generate-certificates","text":"After installing OpenSSL, perform the following steps: Generate a key for the CA (certification authority). To generate a 2048-bit long RSA (creates a new file PitayaRootCARSA.key to store the random key), using the following command: openssl genrsa -out PitayaRootCARSA.key 2048 Create your self-signed root CA certificate PitayaRoot.crt . You need to provide some data for your Root certificate, using the following command: openssl req -new -x509 -days 1826 -key PitayaRootCARSA.key -out PitayaRoot.crt Create the custom certificate, which is signed by the CA root certificate created earlier. First, generate the pitaya_rsa.key , using the following command: openssl genrsa -out pitaya_rsa.key 2048 To generate a certificate request file (CSR) using this generated key, use the following command: openssl req -new -key pitaya_rsa.key -out pitaya_rsa.csr Process the request for the certificate and get it signed by the root CA, using the following command: openssl x509 -req -days 730 -in pitaya_rsa.csr -CA PitayaRoot.crt -CAkey PitayaRootCARSA.key -CAcreateserial -out pitaya_rsa.crt","title":"Generate Certificates"},{"location":"wifi/create-tls-certificates/#convert-x509-certificates","text":"The most known encodings for the X.509 digital certificates are PEM and DER formats. The PEM format is base64 encoding of the DER enclosed with messages -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- . The current implementation of the WINC root_certificate_downloader supports only DER format. If the certificate is not in DER format, it must be converted first. The OpenSSL is used for certificate conversion by the following command: openssl x509 -outform der -in PitayaRoot.crt -out PitayaRoot.cer openssl x509 -outform der -in pitaya_rsa.crt -out pitaya_rsa.cer","title":"Convert X.509 Certificates"},{"location":"wifi/create-tls-certificates/#download-certificates","text":"Follow the sections below to download the certificates: Download Root Certificates Download TLS Certificates","title":"Download Certificates"},{"location":"wifi/create-tls-certificates/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/advanced/mqtt-client-example/","text":"MQTT Client Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to implement an MQTT client using the MQTT protocol. For more about MQTT, see the MQTT Version 3.1.1 Specification . This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mqtt_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mqtt_client_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in mqtt_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the MQTT client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command mqtt connect iot.eclipse.org to connect the MQTT broker. Use command mqtt sub pitayago to subscribe the topic pitayago . Use command mqtt pub pitayago \"Hello World!\" to publish Hello World! to the topic pitayago . Observe that the message should be received. Head to https://www.eclipse.org/paho/clients/js/utility/ , connect the same broker and publish a message to the same topic above. Observe that Pitaya Go will receive the message. You can also use the Web Device CLI application to test this example. Web Device CLI Reference MQTT Version 3.1.1 Specification Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"MQTT Client Example"},{"location":"wifi/advanced/mqtt-client-example/#mqtt-client-example","text":"","title":"MQTT Client Example"},{"location":"wifi/advanced/mqtt-client-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to implement an MQTT client using the MQTT protocol. For more about MQTT, see the MQTT Version 3.1.1 Specification . This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/advanced/mqtt-client-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mqtt_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mqtt_client_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/advanced/mqtt-client-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in mqtt_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/advanced/mqtt-client-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the MQTT client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command mqtt connect iot.eclipse.org to connect the MQTT broker. Use command mqtt sub pitayago to subscribe the topic pitayago . Use command mqtt pub pitayago \"Hello World!\" to publish Hello World! to the topic pitayago . Observe that the message should be received. Head to https://www.eclipse.org/paho/clients/js/utility/ , connect the same broker and publish a message to the same topic above. Observe that Pitaya Go will receive the message. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/advanced/mqtt-client-example/#reference","text":"MQTT Version 3.1.1 Specification","title":"Reference"},{"location":"wifi/advanced/mqtt-client-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/advanced/ssl-connect-example/","text":"SSL Client Connection Example Description This example demonstrates how to set up an SSL connection with the Pitaya Go board. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ssl_connect_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ssl_connect_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ssl_connect_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the SSL connection: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Using command ssl connect github.com to connect to GitHub with SSL enabled. Observe that the status will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"SSL Connection Example"},{"location":"wifi/advanced/ssl-connect-example/#ssl-client-connection-example","text":"","title":"SSL Client Connection Example"},{"location":"wifi/advanced/ssl-connect-example/#description","text":"This example demonstrates how to set up an SSL connection with the Pitaya Go board. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/advanced/ssl-connect-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ssl_connect_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ssl_connect_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/advanced/ssl-connect-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ssl_connect_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/advanced/ssl-connect-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the SSL connection: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Using command ssl connect github.com to connect to GitHub with SSL enabled. Observe that the status will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/advanced/ssl-connect-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/advanced/weather-client-example/","text":"Weather Client Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to to retrieve weather information from a weather server ( openweathermap.org ). This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. See OpenWeatherMap API Guide for detail information about the services and how to start working with them. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/weather_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/weather_client_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in weather_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the weather client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Head to openweathermap.org , sign up, and get an API key on API keys tab in your account. The API key should be like this: 006192529aff495d330ea051ad08d9cc Use command weather get \"New York\" 006192529aff495d330ea051ad08d9cc to get the current weather data of New York city. Observe that the weather data will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI Reference OpenWeatherMap API Guide Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Weather Client Example"},{"location":"wifi/advanced/weather-client-example/#weather-client-example","text":"","title":"Weather Client Example"},{"location":"wifi/advanced/weather-client-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to to retrieve weather information from a weather server ( openweathermap.org ). This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. See OpenWeatherMap API Guide for detail information about the services and how to start working with them. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/advanced/weather-client-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/weather_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/weather_client_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/advanced/weather-client-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in weather_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/advanced/weather-client-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the weather client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Head to openweathermap.org , sign up, and get an API key on API keys tab in your account. The API key should be like this: 006192529aff495d330ea051ad08d9cc Use command weather get \"New York\" 006192529aff495d330ea051ad08d9cc to get the current weather data of New York city. Observe that the weather data will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/advanced/weather-client-example/#reference","text":"OpenWeatherMap API Guide","title":"Reference"},{"location":"wifi/advanced/weather-client-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/ap-scan-example/","text":"How to Scan APs Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to explain how to scan AP as a station. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ap_scan_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ap_scan_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ap_scan_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to scan the nearby APs: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi scan to scan the nearby APs. Observe that the scan result will display on the terminal window. You can also use the Web Device CLI application to test the example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"AP Scan Example"},{"location":"wifi/basic/ap-scan-example/#how-to-scan-aps","text":"","title":"How to Scan APs"},{"location":"wifi/basic/ap-scan-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to explain how to scan AP as a station. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/ap-scan-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ap_scan_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ap_scan_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/ap-scan-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ap_scan_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/ap-scan-example/#testing","text":"The application is now programmed and running. Perform the following steps to scan the nearby APs: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi scan to scan the nearby APs. Observe that the scan result will display on the terminal window. You can also use the Web Device CLI application to test the example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/ap-scan-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/chip-info-example/","text":"How to Get Wi-Fi Chip Information Description This example demonstrates how to retrieve the chip information of the Wi-Fi module on Pitaya Go. This is a basic operation to identify which HW version is used. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/chip_info_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/chip_info_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in chip_info_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing Perform the following steps to retrieve the chip information: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi info to retrieve the chip information. You can also use the Web Device CLI application to test this example. Make sure you have Chrome 56+ installed on your computer. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Chip Info Example"},{"location":"wifi/basic/chip-info-example/#how-to-get-wi-fi-chip-information","text":"","title":"How to Get Wi-Fi Chip Information"},{"location":"wifi/basic/chip-info-example/#description","text":"This example demonstrates how to retrieve the chip information of the Wi-Fi module on Pitaya Go. This is a basic operation to identify which HW version is used. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/chip-info-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/chip_info_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/chip_info_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/chip-info-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in chip_info_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU (Device Firmware Update) mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/chip-info-example/#testing","text":"Perform the following steps to retrieve the chip information: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi info to retrieve the chip information. You can also use the Web Device CLI application to test this example. Make sure you have Chrome 56+ installed on your computer. Web Device CLI","title":"Testing"},{"location":"wifi/basic/chip-info-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/mac-address-example/","text":"How to Set/Get the MAC Address Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to retrieve the MAC address of the Wi-Fi module. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mac_address_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mac_address_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in mac_address_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to get the MAC address: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi mac_address to print the MAC Address. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"MAC Address Example"},{"location":"wifi/basic/mac-address-example/#how-to-setget-the-mac-address","text":"","title":"How to Set/Get the MAC Address"},{"location":"wifi/basic/mac-address-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to retrieve the MAC address of the Wi-Fi module. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/mac-address-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mac_address_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mac_address_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/mac-address-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in mac_address_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/mac-address-example/#testing","text":"The application is now programmed and running. Perform the following steps to get the MAC address: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi mac_address to print the MAC Address. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/mac-address-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/mode-ap-example/","text":"How to Run AP Mode Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to behave as an AP. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Note The Wi-Fi module supports AP mode operation with the following limitations: Only one associated station is supported. After a connection is established with a station, further connections are rejected. The device could not work as a station in this mode (STA/AP concurrency is not supported). Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mode_ap_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mode_ap_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in mode_ap_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to act as an AP: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi enable_ap {NAME} {PWD} to start an AP, where {NAME} is the name of the AP and {PWD} is the password of the AP. If you want to create an Open network, {PWD} can be left blank. Use a mobile device to scan the network and join it. Observe that BLUE LED is lit and the station IP will display, that is, the device is connected. You can use command wifi disable_ap to disable the AP. Observe that BLUE LED is off. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"AP Mode Example"},{"location":"wifi/basic/mode-ap-example/#how-to-run-ap-mode","text":"","title":"How to Run AP Mode"},{"location":"wifi/basic/mode-ap-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to behave as an AP. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Note The Wi-Fi module supports AP mode operation with the following limitations: Only one associated station is supported. After a connection is established with a station, further connections are rejected. The device could not work as a station in this mode (STA/AP concurrency is not supported). Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/mode-ap-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mode_ap_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mode_ap_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/mode-ap-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in mode_ap_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/mode-ap-example/#testing","text":"The application is now programmed and running. Perform the following steps to act as an AP: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi enable_ap {NAME} {PWD} to start an AP, where {NAME} is the name of the AP and {PWD} is the password of the AP. If you want to create an Open network, {PWD} can be left blank. Use a mobile device to scan the network and join it. Observe that BLUE LED is lit and the station IP will display, that is, the device is connected. You can use command wifi disable_ap to disable the AP. Observe that BLUE LED is off. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/mode-ap-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/mode-sta-example/","text":"How to Run STA Mode Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to behave as a Wi-Fi station. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mode_sta_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mode_sta_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in mode_sta_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to connect to a Wi-Fi Access Point: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi status to retrieve the Wi-Fi connection status. Use command wifi disconnect to disconnect the network. Observe that BLUE LED is off. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"STA Mode Example"},{"location":"wifi/basic/mode-sta-example/#how-to-run-sta-mode","text":"","title":"How to Run STA Mode"},{"location":"wifi/basic/mode-sta-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to behave as a Wi-Fi station. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/mode-sta-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/mode_sta_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/mode_sta_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/mode-sta-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in mode_sta_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/mode-sta-example/#testing","text":"The application is now programmed and running. Perform the following steps to connect to a Wi-Fi Access Point: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi status to retrieve the Wi-Fi connection status. Use command wifi disconnect to disconnect the network. Observe that BLUE LED is off. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/mode-sta-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/power-mode-example/","text":"How to Set Power Save Mode Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to check the PS (Power Save) mode. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Hardware Prerequisites 1x Pitaya Go board 1x Digital Multimeter 1x DC Power Supply 1x 2-pin JST cable Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/power_save_mode_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/power_save_mode_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in power_save_mode_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to check the PS (Power Save) mode: Follow the figure below to setup the hardware for current measurements: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi sleep to place the Wi-Fi module into sleep mode for a specified period of time. The current measurements can be done over Digital Multimeter once the current remains constant. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Power Save Mode Example"},{"location":"wifi/basic/power-mode-example/#how-to-set-power-save-mode","text":"","title":"How to Set Power Save Mode"},{"location":"wifi/basic/power-mode-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to check the PS (Power Save) mode. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/power-mode-example/#hardware-prerequisites","text":"1x Pitaya Go board 1x Digital Multimeter 1x DC Power Supply 1x 2-pin JST cable","title":"Hardware Prerequisites"},{"location":"wifi/basic/power-mode-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/power_save_mode_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/power_save_mode_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/power-mode-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in power_save_mode_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/power-mode-example/#testing","text":"The application is now programmed and running. Perform the following steps to check the PS (Power Save) mode: Follow the figure below to setup the hardware for current measurements: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi sleep to place the Wi-Fi module into sleep mode for a specified period of time. The current measurements can be done over Digital Multimeter once the current remains constant. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/power-mode-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/provision-http-example/","text":"How to Run HTTP Provision Mode Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to start the HTTP Provision Mode. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/provision_http_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/provision_http_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in provision_http_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to start the HTTP Provision Mode: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi start_provision to start the HTTP Provision Mode. Observe that the following information will display on the terminal window. Provision Mode started. Connect to [ iot.makerdiary.com ] via AP [ PITAYA_XX:XX ] and fill up the page. Use a mobile device to scan the network and join PITAYA_XX:XX . Observe that BLUE LED is lit and the Wi-Fi IP will display, that is, the device is connected. Populate the setup page, and then press Connect. Pitaya Go will be connected to the AP that you configured. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"HTTP Provision Example"},{"location":"wifi/basic/provision-http-example/#how-to-run-http-provision-mode","text":"","title":"How to Run HTTP Provision Mode"},{"location":"wifi/basic/provision-http-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to start the HTTP Provision Mode. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/provision-http-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/provision_http_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/provision_http_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/provision-http-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in provision_http_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/provision-http-example/#testing","text":"The application is now programmed and running. Perform the following steps to start the HTTP Provision Mode: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use command wifi to print the command help information. Use command wifi start_provision to start the HTTP Provision Mode. Observe that the following information will display on the terminal window. Provision Mode started. Connect to [ iot.makerdiary.com ] via AP [ PITAYA_XX:XX ] and fill up the page. Use a mobile device to scan the network and join PITAYA_XX:XX . Observe that BLUE LED is lit and the Wi-Fi IP will display, that is, the device is connected. Populate the setup page, and then press Connect. Pitaya Go will be connected to the AP that you configured. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/provision-http-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/basic/signal-strength-example/","text":"How to Get the Wi-Fi Signal Strength Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to check signal strength, such as RSSI. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/signal_strength_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/signal_strength_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in signal_strength_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to get the RSSI value: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The RSSI information will display on the terminal window. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Signal Strength Example"},{"location":"wifi/basic/signal-strength-example/#how-to-get-the-wi-fi-signal-strength","text":"","title":"How to Get the Wi-Fi Signal Strength"},{"location":"wifi/basic/signal-strength-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to check signal strength, such as RSSI. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/basic/signal-strength-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/signal_strength_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/signal_strength_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/basic/signal-strength-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in signal_strength_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/basic/signal-strength-example/#testing","text":"The application is now programmed and running. Perform the following steps to get the RSSI value: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi to print the command help information. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The RSSI information will display on the terminal window. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/basic/signal-strength-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/ping-example/","text":"How to Send Ping Request Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to send a ping request to the specified host IP. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ping_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ping_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in ping_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to send a ping request: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command ping 8.8.8.8 to ping Google\u2019s DNS 8.8.8.8 . The response will display on the terminal window. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Ping Request Example"},{"location":"wifi/protocol/ping-example/#how-to-send-ping-request","text":"","title":"How to Send Ping Request"},{"location":"wifi/protocol/ping-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to send a ping request to the specified host IP. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/ping-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/ping_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/ping_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/ping-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ping_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/ping-example/#testing","text":"The application is now programmed and running. Perform the following steps to send a ping request: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command ping 8.8.8.8 to ping Google\u2019s DNS 8.8.8.8 . The response will display on the terminal window. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/ping-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/tcp-client-example/","text":"TCP Client Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the TCP client. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_tcp_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_tcp_client_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in simple_tcp_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the TCP client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Navigate to the script directory and start a TCP server on your host. The host IP and port will display on the terminal window. python ./tcp_server.py starting up on ( 192.168.137.15 , 6666 ) waiting for a connection In the console of Pitaya Go, use command tcp connect 192.168.137.15 6666 to connect the TCP server. Replace 192.168.137.15 with your own server IP. Use command tcp send \"Hello World!\" to send the message to the TCP server. Once the message is received by the server, it will be sent back. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"TCP Client Example"},{"location":"wifi/protocol/tcp-client-example/#tcp-client-example","text":"","title":"TCP Client Example"},{"location":"wifi/protocol/tcp-client-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the TCP client. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/tcp-client-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_tcp_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_tcp_client_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/tcp-client-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in simple_tcp_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/tcp-client-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the TCP client: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Navigate to the script directory and start a TCP server on your host. The host IP and port will display on the terminal window. python ./tcp_server.py starting up on ( 192.168.137.15 , 6666 ) waiting for a connection In the console of Pitaya Go, use command tcp connect 192.168.137.15 6666 to connect the TCP server. Replace 192.168.137.15 with your own server IP. Use command tcp send \"Hello World!\" to send the message to the TCP server. Once the message is received by the server, it will be sent back. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/tcp-client-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/tcp-server-example/","text":"TCP Server Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the TCP server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_tcp_server_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_tcp_server_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in simple_tcp_server_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the TCP server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The local IP will display: Wi-Fi connected Wi-Fi IP is 192 .168.137.189 Press Enter to continue ... Use command tcp bind 6666 to bind the TCP socket. Navigate to the script directory and start a TCP client on your host. Replace 192.168.137.189 with your own server IP. python ./tcp_client.py 192 .168.137.189 6666 After received Hello from the client, use command tcp send \"World\" to response to the TCP client. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"TCP Server Example"},{"location":"wifi/protocol/tcp-server-example/#tcp-server-example","text":"","title":"TCP Server Example"},{"location":"wifi/protocol/tcp-server-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the TCP server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/tcp-server-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_tcp_server_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_tcp_server_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/tcp-server-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in simple_tcp_server_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/tcp-server-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the TCP server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The local IP will display: Wi-Fi connected Wi-Fi IP is 192 .168.137.189 Press Enter to continue ... Use command tcp bind 6666 to bind the TCP socket. Navigate to the script directory and start a TCP client on your host. Replace 192.168.137.189 with your own server IP. python ./tcp_client.py 192 .168.137.189 6666 After received Hello from the client, use command tcp send \"World\" to response to the TCP client. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/tcp-server-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/time-client-example/","text":"NTP Time Client Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to retrieve time information from the time server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/time_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/time_client_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in time_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to retrieve time information from the time server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi sntp *.pool.ntp.org to configure what NTP server the SNTP client should use. Use command systime to retrieve the system time from the NTP server. Observe that the time will display in the console after a while. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"NTP Time Client Example"},{"location":"wifi/protocol/time-client-example/#ntp-time-client-example","text":"","title":"NTP Time Client Example"},{"location":"wifi/protocol/time-client-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to retrieve time information from the time server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/time-client-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/time_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/time_client_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/time-client-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in time_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/time-client-example/#testing","text":"The application is now programmed and running. Perform the following steps to retrieve time information from the time server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Use command wifi sntp *.pool.ntp.org to configure what NTP server the SNTP client should use. Use command systime to retrieve the system time from the NTP server. Observe that the time will display in the console after a while. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/time-client-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/udp-client-example/","text":"UDP Client Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the UDP socket. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_udp_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_udp_client_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in simple_udp_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the UDP socket: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Navigate to the script directory and start an UDP server on your host. The server IP and port will display on the terminal window. python ./tcp_server.py starting up on ( 192.168.137.15 , 6666 ) In the console of Pitaya Go, use command udp connect 192.168.137.15 6666 to connect the UDP server. Replace 192.168.137.15 with your own server IP. Use command udp send \"Hello!\" to send the message to the server. The server should receive the message as expected and then close the socket. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"UDP Client Example"},{"location":"wifi/protocol/udp-client-example/#udp-client-example","text":"","title":"UDP Client Example"},{"location":"wifi/protocol/udp-client-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the UDP socket. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/udp-client-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_udp_client_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_udp_client_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/udp-client-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in simple_udp_client_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/udp-client-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the UDP socket: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. Navigate to the script directory and start an UDP server on your host. The server IP and port will display on the terminal window. python ./tcp_server.py starting up on ( 192.168.137.15 , 6666 ) In the console of Pitaya Go, use command udp connect 192.168.137.15 6666 to connect the UDP server. Replace 192.168.137.15 with your own server IP. Use command udp send \"Hello!\" to send the message to the server. The server should receive the message as expected and then close the socket. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/udp-client-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/protocol/udp-server-example/","text":"UDP Server Example Description This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the UDP server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_udp_server_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_udp_server_example/armgcc Run make to build the example: make Programming the firmware If compiled successfully, the firmware is located in simple_udp_server_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go. Testing The application is now programmed and running. Perform the following steps to test the UDP server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The local IP will display: Wi-Fi connected Wi-Fi IP is 192 .168.137.189 Press Enter to continue ... Use command udp bind 6666 to bind the UDP socket. Navigate to the script directory and start a UDP client on your host. Replace 192.168.137.189 with your own server IP. python ./udp_client.py 192 .168.137.189 6666 Observe that the message received from the client will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"UDP Server Example"},{"location":"wifi/protocol/udp-server-example/#udp-server-example","text":"","title":"UDP Server Example"},{"location":"wifi/protocol/udp-server-example/#description","text":"This example demonstrates the use of the Wi-Fi module with the Pitaya Go board to test the UDP server. This example also implements the Command Line Interface over BLE NUS and USB CDC ACM. Both consoles can be opened and used independently. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"wifi/protocol/udp-server-example/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: pitaya-go/examples/wifi/simple_udp_server_example . Open terminal and navigate to the directory with the example Makefile: cd ./pitaya-go/examples/wifi/simple_udp_server_example/armgcc Run make to build the example: make","title":"Building the example"},{"location":"wifi/protocol/udp-server-example/#programming-the-firmware","text":"If compiled successfully, the firmware is located in simple_udp_server_example/armgcc/_build with the name nrf52840_xxaa.hex . While pushing the USER button, press the RESET button to enter the DFU mode. Then program the firmware using the nRF Connect for Desktop tool. If the SoftDevice is not programmed before, remember to add the SoftDevice. The SoftDevice is located in nRF5 SDK /components/softdevice/s140/hex/s140_nrf52_6.1.0_softdevice.hex . Tip See Programming section for details about how to program your Pitaya Go.","title":"Programming the firmware"},{"location":"wifi/protocol/udp-server-example/#testing","text":"The application is now programmed and running. Perform the following steps to test the UDP server: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodemD2E39D222D781 115200 Press Enter in the terminal. A console prompt is displayed. Use the Tab key to print the available commands. Use command wifi connect {SSID} {PSK} to connect to your AP. The parameters stand for the following: {SSID} : The name of AP. If not specified, the device will attempt to reconnect to the last-associated AP. {PSK} : The passphrase of AP. MUST be 8 characters or more. If it's an Open network, it can be left blank. Observe that BLUE LED is lit, that is, the Wi-Fi is connected. The local IP will display: Wi-Fi connected Wi-Fi IP is 192 .168.137.189 Press Enter to continue ... Use command udp bind 6666 to bind the UDP socket. Navigate to the script directory and start a UDP client on your host. Replace 192.168.137.189 with your own server IP. python ./udp_client.py 192 .168.137.189 6666 Observe that the message received from the client will display in the console. You can also use the Web Device CLI application to test this example. Web Device CLI","title":"Testing"},{"location":"wifi/protocol/udp-server-example/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/","text":"Prepare for Setup Description The Wi-Fi module(ATWINC1500B) features an on-chip microcontroller and integrated SPI Flash memory for the system firmware. The serial Flash memory also stores the root certificate required for the TLS/SSL connection and the power gain values used by the transceiver. This section details the download procedure of firmware, TLS/SSL root certificates, and TX power gain values into WINC serial Flash. Note Before updating the firmware, use Chip Info Example to check your current version. The latest Firmware Version is 19.6.1 . If it's up to date, there is no need to download the firmware. The download procedure only works on Windows computer. How it works The following illustration shows how contents are downloaded into WINC serial Flash: Prerequisites 1x Pitaya Go board A Windows 10 machine nRF Connect for Desktop 1x USB-C Cable Clone the repository Clone the pitaya-go repository from GitHub to your Windows 10 machine: git clone https://github.com/makerdiary/pitaya-go This repository contains all the necessary tools to update the firmware. Note that all Wi-Fi tools only work on Windows platform. Next Steps Firmware download procedure Root certificates download procedure TLS certificates download procedure Customized provisioning webpage download Gain values download procedure Reference ATWINC15x0 Wi-Fi\u00ae Network Controller Software Design Guide ATWINC15x0 Wi-Fi\u00ae Network Controller Software Programming Guide ATWINC15x0 Integrated Serial Flash and Memory Download Procedure ATWINC15x0 Transport Layer Security (TLS) User's Guide Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Prepare for Setup"},{"location":"wifi/update/#prepare-for-setup","text":"","title":"Prepare for Setup"},{"location":"wifi/update/#description","text":"The Wi-Fi module(ATWINC1500B) features an on-chip microcontroller and integrated SPI Flash memory for the system firmware. The serial Flash memory also stores the root certificate required for the TLS/SSL connection and the power gain values used by the transceiver. This section details the download procedure of firmware, TLS/SSL root certificates, and TX power gain values into WINC serial Flash. Note Before updating the firmware, use Chip Info Example to check your current version. The latest Firmware Version is 19.6.1 . If it's up to date, there is no need to download the firmware. The download procedure only works on Windows computer.","title":"Description"},{"location":"wifi/update/#how-it-works","text":"The following illustration shows how contents are downloaded into WINC serial Flash:","title":"How it works"},{"location":"wifi/update/#prerequisites","text":"1x Pitaya Go board A Windows 10 machine nRF Connect for Desktop 1x USB-C Cable","title":"Prerequisites"},{"location":"wifi/update/#clone-the-repository","text":"Clone the pitaya-go repository from GitHub to your Windows 10 machine: git clone https://github.com/makerdiary/pitaya-go This repository contains all the necessary tools to update the firmware. Note that all Wi-Fi tools only work on Windows platform.","title":"Clone the repository"},{"location":"wifi/update/#next-steps","text":"Firmware download procedure Root certificates download procedure TLS certificates download procedure Customized provisioning webpage download Gain values download procedure","title":"Next Steps"},{"location":"wifi/update/#reference","text":"ATWINC15x0 Wi-Fi\u00ae Network Controller Software Design Guide ATWINC15x0 Wi-Fi\u00ae Network Controller Software Programming Guide ATWINC15x0 Integrated Serial Flash and Memory Download Procedure ATWINC15x0 Transport Layer Security (TLS) User's Guide","title":"Reference"},{"location":"wifi/update/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/customize-provisioning-page/","text":"How to Customize Provisioning Page Description The WINC device features a Provisioning Webpage mode that can be used to enter user credentials to connect the WINC device to the desired Access Point. The HTTP server and the actual HTML provisioning webpage is embedded in the WINC firmware, therefore, it cannot be modified from the host MCU. The Wi-Fi utils include the HTML code used by the WINC for HTTP provisioning and also the necessary scripts to generate a new WINC firmware image with the modifed provisioning web page. Tip Before you start download, see Prepare for Setup for prerequisites. Steps Perform the following steps to download customized provisioning webpage: Modify the HTML code in utils/wifi/provisioning_webpage folder as required. Open CMD and navigate to the directory with the Wi-Fi utils: cd . \\p itaya-go \\u tils \\w ifi Run modify_provisioning_webpage.bat script to generate a new WINC firmware image that includes the customized HTML code. modify_provisioning_webpage.bat The generated new firmware image overwrites the default firmware image located in the utils/wifi/firmware folder. The following message appears to indicate that the new firmware is successfully generated. Follow the steps mentioned in How to Download Wi-Fi Firmware to update the new firmware. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Customize Provisioning Page"},{"location":"wifi/update/customize-provisioning-page/#how-to-customize-provisioning-page","text":"","title":"How to Customize Provisioning Page"},{"location":"wifi/update/customize-provisioning-page/#description","text":"The WINC device features a Provisioning Webpage mode that can be used to enter user credentials to connect the WINC device to the desired Access Point. The HTTP server and the actual HTML provisioning webpage is embedded in the WINC firmware, therefore, it cannot be modified from the host MCU. The Wi-Fi utils include the HTML code used by the WINC for HTTP provisioning and also the necessary scripts to generate a new WINC firmware image with the modifed provisioning web page. Tip Before you start download, see Prepare for Setup for prerequisites.","title":"Description"},{"location":"wifi/update/customize-provisioning-page/#steps","text":"Perform the following steps to download customized provisioning webpage: Modify the HTML code in utils/wifi/provisioning_webpage folder as required. Open CMD and navigate to the directory with the Wi-Fi utils: cd . \\p itaya-go \\u tils \\w ifi Run modify_provisioning_webpage.bat script to generate a new WINC firmware image that includes the customized HTML code. modify_provisioning_webpage.bat The generated new firmware image overwrites the default firmware image located in the utils/wifi/firmware folder. The following message appears to indicate that the new firmware is successfully generated. Follow the steps mentioned in How to Download Wi-Fi Firmware to update the new firmware.","title":"Steps"},{"location":"wifi/update/customize-provisioning-page/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/download-firmware/","text":"How to Download Wi-Fi Firmware Description As the WINC device is connected to host MCU through SPI interface, upgrading the WINC serial Flash via the host MCU is an easier solution. Since the WINC provides transparent access to host MCU, the WINC serial Flash can be read/written from host MCU. The host MCU can program the serial (SPI) Flash without the need for operational firmware in the WINC. The host MCU running the serial bridge firmware is connected between a Windows computer and a WINC SPI to download the firmware to a WINC serial Flash. This section details how to download new Wi-Fi firmware into the WINC serial Flash. Tip Before you start download, see Prepare for Setup for prerequisites. Steps Perform the following steps to download the firmware: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Open CMD and navigate to the directory with the Wi-Fi utils: cd . \\p itaya-go \\u tils \\w ifi Run download_all.bat script to download the Wi-Fi firmware, TLS/SSL root certificate, and TX power gain values: download_all.bat UART 0 { comport } { private_key_path } { rsa_cert_path } { ecdsa_cert_path } The parameters stand for the following: {comport} : Number of the serialport (e.g. 36 represents COM36 ). {private_key_path} : Path of the TLS Private Key. Can be none if no key present. {rsa_cert_path} : Path of RSA based Certificate. Can be none if no certificate present. {ecdsa_cert_path} : Path of ECC based Certificate. Can be none if no certificate present. After several seconds, the following message appears in order to indicate that the download procedure is successfully completed. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Download Wi-Fi Firmware"},{"location":"wifi/update/download-firmware/#how-to-download-wi-fi-firmware","text":"","title":"How to Download Wi-Fi Firmware"},{"location":"wifi/update/download-firmware/#description","text":"As the WINC device is connected to host MCU through SPI interface, upgrading the WINC serial Flash via the host MCU is an easier solution. Since the WINC provides transparent access to host MCU, the WINC serial Flash can be read/written from host MCU. The host MCU can program the serial (SPI) Flash without the need for operational firmware in the WINC. The host MCU running the serial bridge firmware is connected between a Windows computer and a WINC SPI to download the firmware to a WINC serial Flash. This section details how to download new Wi-Fi firmware into the WINC serial Flash. Tip Before you start download, see Prepare for Setup for prerequisites.","title":"Description"},{"location":"wifi/update/download-firmware/#steps","text":"Perform the following steps to download the firmware: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Open CMD and navigate to the directory with the Wi-Fi utils: cd . \\p itaya-go \\u tils \\w ifi Run download_all.bat script to download the Wi-Fi firmware, TLS/SSL root certificate, and TX power gain values: download_all.bat UART 0 { comport } { private_key_path } { rsa_cert_path } { ecdsa_cert_path } The parameters stand for the following: {comport} : Number of the serialport (e.g. 36 represents COM36 ). {private_key_path} : Path of the TLS Private Key. Can be none if no key present. {rsa_cert_path} : Path of RSA based Certificate. Can be none if no certificate present. {ecdsa_cert_path} : Path of ECC based Certificate. Can be none if no certificate present. After several seconds, the following message appears in order to indicate that the download procedure is successfully completed.","title":"Steps"},{"location":"wifi/update/download-firmware/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/download-root-certs/","text":"How to Download Root Certificates Description The WINC saves the Root certificates inside the serial Flash in 4K sector (the maximum size of all certificates in Flash must be less than 4K). The following procedure explains how to download the Root certificates. Tip Before you start download, see Prepare for Setup for prerequisites. Steps Perform the following steps to download Root certificates: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Paste new Root certificates in the utils\\wifi\\Tools\\root_certificate_downloader\\binary folder. Open CMD and navigate to the directory with root_certificate_downloader.exe : cd . \\p itaya-go \\u tils \\w ifi \\T ools \\r oot_certificate_downloader \\d ebug_uart \\ Run RootCertDownload.bat script to download all Root certificates. RootCertDownload.bat { comport } where {comport} is the number of the serialport (e.g. 36 represents COM36 ). After a few seconds, the following message appears to indicate that the root certificates are successfully downloaded. Note If certificate upload fails with (ERROR) Root Certificate Flash is Full , that is, the allocated memory in SPI flash on ATWINC1500B for certificates is full. Try after removing one or more certificates from utils\\wifi\\Tools\\root_certificate_downloader\\binary . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Download Root Certificates"},{"location":"wifi/update/download-root-certs/#how-to-download-root-certificates","text":"","title":"How to Download Root Certificates"},{"location":"wifi/update/download-root-certs/#description","text":"The WINC saves the Root certificates inside the serial Flash in 4K sector (the maximum size of all certificates in Flash must be less than 4K). The following procedure explains how to download the Root certificates. Tip Before you start download, see Prepare for Setup for prerequisites.","title":"Description"},{"location":"wifi/update/download-root-certs/#steps","text":"Perform the following steps to download Root certificates: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Paste new Root certificates in the utils\\wifi\\Tools\\root_certificate_downloader\\binary folder. Open CMD and navigate to the directory with root_certificate_downloader.exe : cd . \\p itaya-go \\u tils \\w ifi \\T ools \\r oot_certificate_downloader \\d ebug_uart \\ Run RootCertDownload.bat script to download all Root certificates. RootCertDownload.bat { comport } where {comport} is the number of the serialport (e.g. 36 represents COM36 ). After a few seconds, the following message appears to indicate that the root certificates are successfully downloaded. Note If certificate upload fails with (ERROR) Root Certificate Flash is Full , that is, the allocated memory in SPI flash on ATWINC1500B for certificates is full. Try after removing one or more certificates from utils\\wifi\\Tools\\root_certificate_downloader\\binary .","title":"Steps"},{"location":"wifi/update/download-root-certs/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/download-tls-certs/","text":"How to Download TLS Certificates Description For proper operation of both the TLS server and TLS client authentication, the ATWINC1500B device must have a certificate/private key pair assigned to it. An 8KB flash area is reserved for storing the TLS certificates starting from offset 20KB in the ATWINC1500B stacked flash. The TLS certificates can be downloaded into the ATWINC1500B stacked flash by using the dedicated tool tls_cert_flash_tool.exe . Tip Before you start download, see Prepare for Setup for prerequisites. Steps Perform the following steps to download the custom TLS certificates: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Generate the custom certificate/private key pair. See How to Create Custom TLS Certificates for more details. Open CMD and navigate to the directory with tls_cert_flash_tool.exe : cd . \\p itaya-go \\u tils \\w ifi \\T ools \\t ls_cert_flash_tool \\D ebug_UART \\ Run the following scripts to download the certificates: tls_cert_flash_tool.exe write -port { comport } -key { private_key_path } -cert { rsa_cert_path } -cadir { ca_directory } -erase If an ECDSA certificate is available, go on to run: tls_cert_flash_tool.exe write -port { comport } -nokey -cert { ecsda_cert_path } -cadir { ca_directory } The parameters stand for the following: {comport} : Number of the serialport (e.g. 36 represents COM36 ). {private_key_path} : Path of the TLS Private Key. {rsa_cert_path} : Path of RSA based Certificate. {ecdsa_cert_path} : Path of ECC based Certificate. {ca_directory} : A directory containing intermediate CA certificates and/or the Root CA certificate of the ATWINC1500B certificate chain(s). After a few seconds, the following message appears to indicate that the root certificates are successfully downloaded. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Download TLS Certificates"},{"location":"wifi/update/download-tls-certs/#how-to-download-tls-certificates","text":"","title":"How to Download TLS Certificates"},{"location":"wifi/update/download-tls-certs/#description","text":"For proper operation of both the TLS server and TLS client authentication, the ATWINC1500B device must have a certificate/private key pair assigned to it. An 8KB flash area is reserved for storing the TLS certificates starting from offset 20KB in the ATWINC1500B stacked flash. The TLS certificates can be downloaded into the ATWINC1500B stacked flash by using the dedicated tool tls_cert_flash_tool.exe . Tip Before you start download, see Prepare for Setup for prerequisites.","title":"Description"},{"location":"wifi/update/download-tls-certs/#steps","text":"Perform the following steps to download the custom TLS certificates: Program Pitaya Go with the serial bridge firmware: serial_bridge_usb_pitaya_go_vx.x.x.hex . Connect Pitaya Go to a Windows computer. Check the comport number of the device detected. Generate the custom certificate/private key pair. See How to Create Custom TLS Certificates for more details. Open CMD and navigate to the directory with tls_cert_flash_tool.exe : cd . \\p itaya-go \\u tils \\w ifi \\T ools \\t ls_cert_flash_tool \\D ebug_UART \\ Run the following scripts to download the certificates: tls_cert_flash_tool.exe write -port { comport } -key { private_key_path } -cert { rsa_cert_path } -cadir { ca_directory } -erase If an ECDSA certificate is available, go on to run: tls_cert_flash_tool.exe write -port { comport } -nokey -cert { ecsda_cert_path } -cadir { ca_directory } The parameters stand for the following: {comport} : Number of the serialport (e.g. 36 represents COM36 ). {private_key_path} : Path of the TLS Private Key. {rsa_cert_path} : Path of RSA based Certificate. {ecdsa_cert_path} : Path of ECC based Certificate. {ca_directory} : A directory containing intermediate CA certificates and/or the Root CA certificate of the ATWINC1500B certificate chain(s). After a few seconds, the following message appears to indicate that the root certificates are successfully downloaded.","title":"Steps"},{"location":"wifi/update/download-tls-certs/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"wifi/update/modify-gain-values/","text":"How to Modify TX Power Gain Description Gain setting values are used by the RF with different rates to configure the transmission power. The gain values are downloaded as part of the complete download process explained in How to Download Wi-Fi Firmware section. It is impossible to download the gain values alone. Tip Before you start download, see Prepare for Setup for prerequisites. Steps Perform the following steps to modify the TX power gain values: The .csv file in the utils\\wifi\\Tools\\gain_builder\\gain_sheets folder holds the gain values. It must be sorted based on the gain rates (Row) and for all the channels (Column). Modify the values in the default .csv file. Follow the steps mentioned in How to Download Wi-Fi Firmware to download the new gain values. Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Modify TX Power Gain"},{"location":"wifi/update/modify-gain-values/#how-to-modify-tx-power-gain","text":"","title":"How to Modify TX Power Gain"},{"location":"wifi/update/modify-gain-values/#description","text":"Gain setting values are used by the RF with different rates to configure the transmission power. The gain values are downloaded as part of the complete download process explained in How to Download Wi-Fi Firmware section. It is impossible to download the gain values alone. Tip Before you start download, see Prepare for Setup for prerequisites.","title":"Description"},{"location":"wifi/update/modify-gain-values/#steps","text":"Perform the following steps to modify the TX power gain values: The .csv file in the utils\\wifi\\Tools\\gain_builder\\gain_sheets folder holds the gain values. It must be sorted based on the gain rates (Row) and for all the channels (Column). Modify the values in the default .csv file. Follow the steps mentioned in How to Download Wi-Fi Firmware to download the new gain values.","title":"Steps"},{"location":"wifi/update/modify-gain-values/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"}]}